pub use wst_eth_curve_liquidator::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod wst_eth_curve_liquidator {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::Some(::ethers::core::abi::ethabi::Constructor {
                inputs: ::std::vec![
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("ionPool"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("contract IonPool"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("liquidation"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("contract Liquidation"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("weth"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("contract IWETH9"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("wstEth"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("contract IWstEth"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("stEth"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("contract IERC20"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("_treasury"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("address"),
                        ),
                    },
                ],
            }),
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("liquidate"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("liquidate"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("ilkIndex"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(8usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint8"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("user"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("collateralToken"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract IERC20"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("gemJoin"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract GemJoin"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("poolId"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::FixedBytes(
                                        32usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes32"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("wethIsToken0"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("receiveFlashLoan"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("receiveFlashLoan"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Array(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Address,
                                        ),
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract IERC20[]"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("amounts"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Array(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                        ),
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256[]"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Array(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                        ),
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256[]"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("userData"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("AddressEmptyCode"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("AddressEmptyCode"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("target"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("AddressInsufficientBalance"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned(
                                "AddressInsufficientBalance",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("account"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("FailedInnerCall"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("FailedInnerCall"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("SafeERC20FailedOperation"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned(
                                "SafeERC20FailedOperation",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("token"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                        },
                    ],
                ),
            ]),
            receive: true,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static WSTETHCURVELIQUIDATOR_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"a\x01 `@R4\x80\x15b\0\0\x11W_\x80\xFD[P`@Qb\0\x1F\x8F8\x03\x80b\0\x1F\x8F\x839\x81\x81\x01`@R\x81\x01\x90b\0\x007\x91\x90b\0\x04aV[\x85\x85\x85\x83\x83\x83\x83\x83\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xA0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xC0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xE0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP`\xC0Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3`\xA0Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x01p\x92\x91\x90b\0\x05$V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15b\0\x01\x8DW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x01\xB3\x91\x90b\0\x05\x89V[PPPPPPPPP\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x01\0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3s\xDC$1k\x9A\xE0(\xF1I|'^\xB9\x19*>\xA0\xF6p\"\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x02b\x92\x91\x90b\0\x05$V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15b\0\x02\x7FW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x02\xA5\x91\x90b\0\x05\x89V[PPPPPPPb\0\x05\xB9V[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_b\0\x02\xE1\x82b\0\x02\xB6V[\x90P\x91\x90PV[_b\0\x02\xF4\x82b\0\x02\xD5V[\x90P\x91\x90PV[b\0\x03\x06\x81b\0\x02\xE8V[\x81\x14b\0\x03\x11W_\x80\xFD[PV[_\x81Q\x90Pb\0\x03$\x81b\0\x02\xFBV[\x92\x91PPV[_b\0\x036\x82b\0\x02\xD5V[\x90P\x91\x90PV[b\0\x03H\x81b\0\x03*V[\x81\x14b\0\x03SW_\x80\xFD[PV[_\x81Q\x90Pb\0\x03f\x81b\0\x03=V[\x92\x91PPV[_b\0\x03x\x82b\0\x02\xD5V[\x90P\x91\x90PV[b\0\x03\x8A\x81b\0\x03lV[\x81\x14b\0\x03\x95W_\x80\xFD[PV[_\x81Q\x90Pb\0\x03\xA8\x81b\0\x03\x7FV[\x92\x91PPV[_b\0\x03\xBA\x82b\0\x02\xD5V[\x90P\x91\x90PV[b\0\x03\xCC\x81b\0\x03\xAEV[\x81\x14b\0\x03\xD7W_\x80\xFD[PV[_\x81Q\x90Pb\0\x03\xEA\x81b\0\x03\xC1V[\x92\x91PPV[_b\0\x03\xFC\x82b\0\x02\xD5V[\x90P\x91\x90PV[b\0\x04\x0E\x81b\0\x03\xF0V[\x81\x14b\0\x04\x19W_\x80\xFD[PV[_\x81Q\x90Pb\0\x04,\x81b\0\x04\x03V[\x92\x91PPV[b\0\x04=\x81b\0\x02\xD5V[\x81\x14b\0\x04HW_\x80\xFD[PV[_\x81Q\x90Pb\0\x04[\x81b\0\x042V[\x92\x91PPV[_\x80_\x80_\x80`\xC0\x87\x89\x03\x12\x15b\0\x04~Wb\0\x04}b\0\x02\xB2V[[_b\0\x04\x8D\x89\x82\x8A\x01b\0\x03\x14V[\x96PP` b\0\x04\xA0\x89\x82\x8A\x01b\0\x03VV[\x95PP`@b\0\x04\xB3\x89\x82\x8A\x01b\0\x03\x98V[\x94PP``b\0\x04\xC6\x89\x82\x8A\x01b\0\x03\xDAV[\x93PP`\x80b\0\x04\xD9\x89\x82\x8A\x01b\0\x04\x1CV[\x92PP`\xA0b\0\x04\xEC\x89\x82\x8A\x01b\0\x04KV[\x91PP\x92\x95P\x92\x95P\x92\x95V[b\0\x05\x04\x81b\0\x02\xD5V[\x82RPPV[_\x81\x90P\x91\x90PV[b\0\x05\x1E\x81b\0\x05\nV[\x82RPPV[_`@\x82\x01\x90Pb\0\x059_\x83\x01\x85b\0\x04\xF9V[b\0\x05H` \x83\x01\x84b\0\x05\x13V[\x93\x92PPPV[_\x81\x15\x15\x90P\x91\x90PV[b\0\x05e\x81b\0\x05OV[\x81\x14b\0\x05pW_\x80\xFD[PV[_\x81Q\x90Pb\0\x05\x83\x81b\0\x05ZV[\x92\x91PPV[_` \x82\x84\x03\x12\x15b\0\x05\xA1Wb\0\x05\xA0b\0\x02\xB2V[[_b\0\x05\xB0\x84\x82\x85\x01b\0\x05sV[\x91PP\x92\x91PPV[`\x80Q`\xA0Q`\xC0Q`\xE0Qa\x01\0Qa\x19vb\0\x06\x19_9_a\x06\x87\x01R_a\x06\x0C\x01R_\x81\x81`\xD6\x01R\x81\x81a\x05\xC3\x01R\x81\x81a\x06.\x01Ra\x071\x01R_\x81\x81a\x01\x91\x01Ra\x03\xDE\x01R_\x81\x81a\x03B\x01Ra\x04~\x01Ra\x19v_\xF3\xFE`\x80`@R`\x046\x10a\0,W_5`\xE0\x1C\x80cl\xB0D)\x14a\x007W\x80c\xF0O'\x07\x14a\0_Wa\x003V[6a\x003W\0[_\x80\xFD[4\x80\x15a\0BW_\x80\xFD[Pa\0]`\x04\x806\x03\x81\x01\x90a\0X\x91\x90a\r&V[a\0\x87V[\0[4\x80\x15a\0jW_\x80\xFD[Pa\0\x85`\x04\x806\x03\x81\x01\x90a\0\x80\x91\x90a\x10\xDDV[a\x02\xFBV[\0[_`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0\xA3Wa\0\xA2a\r\xC3V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\xD1W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81_\x81Q\x81\x10a\x01\x08Wa\x01\x07a\x11\xB1V[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP_`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01^Wa\x01]a\r\xC3V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\x8CW\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA0\xD5\xF5\x99\x89\x89`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01\xEA\x92\x91\x90a\x11\xFCV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\x05W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02)\x91\x90a\x127V[\x81_\x81Q\x81\x10a\x02<Wa\x02;a\x11\xB1V[[` \x02` \x01\x01\x81\x81RPPs\xBA\x12\"\"\"\"\x8D\x8B\xA4E\x95\x8Au\xA0pMVk\xF2\xC8s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\\8D\x9E0\x84\x84\x8C\x8C\x8C\x8C\x8C\x8C`@Q` \x01a\x02\x96\x96\x95\x94\x93\x92\x91\x90a\x12\xFBV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x85c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\xC4\x94\x93\x92\x91\x90a\x15sV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02\xDBW_\x80\xFD[PZ\xF1\x15\x80\x15a\x02\xEDW=_\x80>=_\xFD[PPPPPPPPPPPPV[_\x83_\x81Q\x81\x10a\x03\x0FWa\x03\x0Ea\x11\xB1V[[` \x02` \x01\x01Q\x90P_\x80_\x80_\x80\x87\x80` \x01\x90Q\x81\x01\x90a\x033\x91\x90a\x16jV[\x95P\x95P\x95P\x95P\x95P\x95P_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16ch\xD8h\r\x880`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\x9B\x92\x91\x90a\x11\xFCV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xB6W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xDA\x91\x90a\x127V[\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c%\x84\x0E\xDA\x88\x880`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x049\x93\x92\x91\x90a\x16\xF3V[`@\x80Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x04TW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04x\x91\x90a\x17(V[PP_\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16ch\xD8h\r\x8A0`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04\xD7\x92\x91\x90a\x11\xFCV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\xF2W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\x16\x91\x90a\x127V[a\x05 \x91\x90a\x17\x93V[\x90P\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xEFi;\xED0\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05]\x92\x91\x90a\x17\xD5V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05tW_\x80\xFD[PZ\xF1\x15\x80\x15a\x05\x86W=_\x80>=_\xFD[PPPP_a\x05\x97\x85\x88\x84\x87a\x06\x83V[\x90P_\x8A\x82a\x05\xA6\x91\x90a\x17\x93V[\x90Pa\x06\x07s\xBA\x12\"\"\"\"\x8D\x8B\xA4E\x95\x8Au\xA0pMVk\xF2\xC8\x8C\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x07\xB9\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\x06r\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x07\xB9\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[PPPPPPPPPPPPPPPV[_\x80\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xDE\x0E\x9A>\x85`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06\xDE\x91\x90a\x17\xFCV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x06\xFAW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\x1E\x91\x90a\x127V[\x90P_a\x07-\x87\x87\x84\x87a\x088V[\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD0\xE3\r\xB0\x82`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x85\x88\x80;\x15\x80\x15a\x07\x95W_\x80\xFD[PZ\xF1\x15\x80\x15a\x07\xA7W=_\x80>=_\xFD[PPPPP\x80\x92PPP\x94\x93PPPPV[a\x083\x83\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB\x85\x85`@Q`$\x01a\x07\xEC\x92\x91\x90a\x17\xD5V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91P`\xE0\x1B` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPPa\tcV[PPPV[_\x80\x85_\x1C\x90P_\x81\x90P_\x80\x85a\x08RW_`\x01a\x08VV[`\x01_[\x91P\x91P\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x85\x89`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x08\x95\x92\x91\x90a\x17\xD5V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x08\xB1W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\xD5\x91\x90a\x18\x15V[P\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c=\xF0!$\x83\x83\x8A_`@Q\x85c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\t\x15\x94\x93\x92\x91\x90a\x18\x94V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\t1W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\tU\x91\x90a\x127V[\x94PPPPP\x94\x93PPPPV[_a\t\x8D\x82\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\t\xF8\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P_\x81Q\x14\x15\x80\x15a\t\xB1WP\x80\x80` \x01\x90Q\x81\x01\x90a\t\xAF\x91\x90a\x18\x15V[\x15[\x15a\t\xF3W\x82`@Q\x7FRt\xAF\xE7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\t\xEA\x91\x90a\x18\xD7V[`@Q\x80\x91\x03\x90\xFD[PPPV[``a\n\x05\x83\x83_a\n\rV[\x90P\x92\x91PPV[``\x81G\x10\x15a\nTW0`@Q\x7F\xCDx`Y\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\nK\x91\x90a\x18\xD7V[`@Q\x80\x91\x03\x90\xFD[_\x80\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x86`@Qa\n|\x91\x90a\x19*V[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\n\xB6W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\n\xBBV[``\x91P[P\x91P\x91Pa\n\xCB\x86\x83\x83a\n\xD6V[\x92PPP\x93\x92PPPV[``\x82a\n\xEBWa\n\xE6\x82a\x0BcV[a\x0B[V[_\x82Q\x14\x80\x15a\x0B\x11WP_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14[\x15a\x0BSW\x83`@Q\x7F\x99\x96\xB3\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0BJ\x91\x90a\x18\xD7V[`@Q\x80\x91\x03\x90\xFD[\x81\x90Pa\x0B\\V[[\x93\x92PPPV[_\x81Q\x11\x15a\x0BuW\x80Q\x80\x82` \x01\xFD[`@Q\x7F\x14%\xEAB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_`\xFF\x82\x16\x90P\x91\x90PV[a\x0B\xCD\x81a\x0B\xB8V[\x81\x14a\x0B\xD7W_\x80\xFD[PV[_\x815\x90Pa\x0B\xE8\x81a\x0B\xC4V[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x0C\x17\x82a\x0B\xEEV[\x90P\x91\x90PV[a\x0C'\x81a\x0C\rV[\x81\x14a\x0C1W_\x80\xFD[PV[_\x815\x90Pa\x0CB\x81a\x0C\x1EV[\x92\x91PPV[_a\x0CR\x82a\x0C\rV[\x90P\x91\x90PV[a\x0Cb\x81a\x0CHV[\x81\x14a\x0ClW_\x80\xFD[PV[_\x815\x90Pa\x0C}\x81a\x0CYV[\x92\x91PPV[_a\x0C\x8D\x82a\x0C\rV[\x90P\x91\x90PV[a\x0C\x9D\x81a\x0C\x83V[\x81\x14a\x0C\xA7W_\x80\xFD[PV[_\x815\x90Pa\x0C\xB8\x81a\x0C\x94V[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x0C\xD0\x81a\x0C\xBEV[\x81\x14a\x0C\xDAW_\x80\xFD[PV[_\x815\x90Pa\x0C\xEB\x81a\x0C\xC7V[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\r\x05\x81a\x0C\xF1V[\x81\x14a\r\x0FW_\x80\xFD[PV[_\x815\x90Pa\r \x81a\x0C\xFCV[\x92\x91PPV[_\x80_\x80_\x80`\xC0\x87\x89\x03\x12\x15a\r@Wa\r?a\x0B\xB0V[[_a\rM\x89\x82\x8A\x01a\x0B\xDAV[\x96PP` a\r^\x89\x82\x8A\x01a\x0C4V[\x95PP`@a\ro\x89\x82\x8A\x01a\x0CoV[\x94PP``a\r\x80\x89\x82\x8A\x01a\x0C\xAAV[\x93PP`\x80a\r\x91\x89\x82\x8A\x01a\x0C\xDDV[\x92PP`\xA0a\r\xA2\x89\x82\x8A\x01a\r\x12V[\x91PP\x92\x95P\x92\x95P\x92\x95V[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\r\xF9\x82a\r\xB3V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x0E\x18Wa\x0E\x17a\r\xC3V[[\x80`@RPPPV[_a\x0E*a\x0B\xA7V[\x90Pa\x0E6\x82\x82a\r\xF0V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0EUWa\x0ETa\r\xC3V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_a\x0Et\x82a\x0C\rV[\x90P\x91\x90PV[a\x0E\x84\x81a\x0EjV[\x81\x14a\x0E\x8EW_\x80\xFD[PV[_\x815\x90Pa\x0E\x9F\x81a\x0E{V[\x92\x91PPV[_a\x0E\xB7a\x0E\xB2\x84a\x0E;V[a\x0E!V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x0E\xDAWa\x0E\xD9a\x0EfV[[\x83[\x81\x81\x10\x15a\x0F\x03W\x80a\x0E\xEF\x88\x82a\x0E\x91V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x0E\xDCV[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x0F!Wa\x0F a\r\xAFV[[\x815a\x0F1\x84\x82` \x86\x01a\x0E\xA5V[\x91PP\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0FTWa\x0FSa\r\xC3V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[a\x0Fw\x81a\x0FeV[\x81\x14a\x0F\x81W_\x80\xFD[PV[_\x815\x90Pa\x0F\x92\x81a\x0FnV[\x92\x91PPV[_a\x0F\xAAa\x0F\xA5\x84a\x0F:V[a\x0E!V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x0F\xCDWa\x0F\xCCa\x0EfV[[\x83[\x81\x81\x10\x15a\x0F\xF6W\x80a\x0F\xE2\x88\x82a\x0F\x84V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x0F\xCFV[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x10\x14Wa\x10\x13a\r\xAFV[[\x815a\x10$\x84\x82` \x86\x01a\x0F\x98V[\x91PP\x92\x91PPV[_\x80\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x10KWa\x10Ja\r\xC3V[[a\x10T\x82a\r\xB3V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a\x10\x81a\x10|\x84a\x101V[a\x0E!V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x10\x9DWa\x10\x9Ca\x10-V[[a\x10\xA8\x84\x82\x85a\x10aV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x10\xC4Wa\x10\xC3a\r\xAFV[[\x815a\x10\xD4\x84\x82` \x86\x01a\x10oV[\x91PP\x92\x91PPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x10\xF5Wa\x10\xF4a\x0B\xB0V[[_\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\x12Wa\x11\x11a\x0B\xB4V[[a\x11\x1E\x87\x82\x88\x01a\x0F\rV[\x94PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11?Wa\x11>a\x0B\xB4V[[a\x11K\x87\x82\x88\x01a\x10\0V[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11lWa\x11ka\x0B\xB4V[[a\x11x\x87\x82\x88\x01a\x10\0V[\x92PP``\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\x99Wa\x11\x98a\x0B\xB4V[[a\x11\xA5\x87\x82\x88\x01a\x10\xB0V[\x91PP\x92\x95\x91\x94P\x92PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[a\x11\xE7\x81a\x0B\xB8V[\x82RPPV[a\x11\xF6\x81a\x0C\rV[\x82RPPV[_`@\x82\x01\x90Pa\x12\x0F_\x83\x01\x85a\x11\xDEV[a\x12\x1C` \x83\x01\x84a\x11\xEDV[\x93\x92PPPV[_\x81Q\x90Pa\x121\x81a\x0FnV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x12LWa\x12Ka\x0B\xB0V[[_a\x12Y\x84\x82\x85\x01a\x12#V[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[_a\x12\x85a\x12\x80a\x12{\x84a\x0B\xEEV[a\x12bV[a\x0B\xEEV[\x90P\x91\x90PV[_a\x12\x96\x82a\x12kV[\x90P\x91\x90PV[_a\x12\xA7\x82a\x12\x8CV[\x90P\x91\x90PV[a\x12\xB7\x81a\x12\x9DV[\x82RPPV[_a\x12\xC7\x82a\x12\x8CV[\x90P\x91\x90PV[a\x12\xD7\x81a\x12\xBDV[\x82RPPV[a\x12\xE6\x81a\x0C\xBEV[\x82RPPV[a\x12\xF5\x81a\x0C\xF1V[\x82RPPV[_`\xC0\x82\x01\x90Pa\x13\x0E_\x83\x01\x89a\x11\xDEV[a\x13\x1B` \x83\x01\x88a\x11\xEDV[a\x13(`@\x83\x01\x87a\x12\xAEV[a\x135``\x83\x01\x86a\x12\xCEV[a\x13B`\x80\x83\x01\x85a\x12\xDDV[a\x13O`\xA0\x83\x01\x84a\x12\xECV[\x97\x96PPPPPPPV[_a\x13d\x82a\x12\x8CV[\x90P\x91\x90PV[a\x13t\x81a\x13ZV[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_a\x13\xAD\x82a\x12\x8CV[\x90P\x91\x90PV[a\x13\xBD\x81a\x13\xA3V[\x82RPPV[_a\x13\xCE\x83\x83a\x13\xB4V[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x13\xF0\x82a\x13zV[a\x13\xFA\x81\x85a\x13\x84V[\x93Pa\x14\x05\x83a\x13\x94V[\x80_[\x83\x81\x10\x15a\x145W\x81Qa\x14\x1C\x88\x82a\x13\xC3V[\x97Pa\x14'\x83a\x13\xDAV[\x92PP`\x01\x81\x01\x90Pa\x14\x08V[P\x85\x93PPPP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x14t\x81a\x0FeV[\x82RPPV[_a\x14\x85\x83\x83a\x14kV[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x14\xA7\x82a\x14BV[a\x14\xB1\x81\x85a\x14LV[\x93Pa\x14\xBC\x83a\x14\\V[\x80_[\x83\x81\x10\x15a\x14\xECW\x81Qa\x14\xD3\x88\x82a\x14zV[\x97Pa\x14\xDE\x83a\x14\x91V[\x92PP`\x01\x81\x01\x90Pa\x14\xBFV[P\x85\x93PPPP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_[\x83\x81\x10\x15a\x150W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x15\x15V[_\x84\x84\x01RPPPPV[_a\x15E\x82a\x14\xF9V[a\x15O\x81\x85a\x15\x03V[\x93Pa\x15_\x81\x85` \x86\x01a\x15\x13V[a\x15h\x81a\r\xB3V[\x84\x01\x91PP\x92\x91PPV[_`\x80\x82\x01\x90Pa\x15\x86_\x83\x01\x87a\x13kV[\x81\x81\x03` \x83\x01Ra\x15\x98\x81\x86a\x13\xE6V[\x90P\x81\x81\x03`@\x83\x01Ra\x15\xAC\x81\x85a\x14\x9DV[\x90P\x81\x81\x03``\x83\x01Ra\x15\xC0\x81\x84a\x15;V[\x90P\x95\x94PPPPPV[_\x81Q\x90Pa\x15\xD9\x81a\x0B\xC4V[\x92\x91PPV[_a\x15\xE9\x82a\x0B\xEEV[\x90P\x91\x90PV[a\x15\xF9\x81a\x15\xDFV[\x81\x14a\x16\x03W_\x80\xFD[PV[_\x81Q\x90Pa\x16\x14\x81a\x15\xF0V[\x92\x91PPV[_\x81Q\x90Pa\x16(\x81a\x0CYV[\x92\x91PPV[_\x81Q\x90Pa\x16<\x81a\x0C\x94V[\x92\x91PPV[_\x81Q\x90Pa\x16P\x81a\x0C\xC7V[\x92\x91PPV[_\x81Q\x90Pa\x16d\x81a\x0C\xFCV[\x92\x91PPV[_\x80_\x80_\x80`\xC0\x87\x89\x03\x12\x15a\x16\x84Wa\x16\x83a\x0B\xB0V[[_a\x16\x91\x89\x82\x8A\x01a\x15\xCBV[\x96PP` a\x16\xA2\x89\x82\x8A\x01a\x16\x06V[\x95PP`@a\x16\xB3\x89\x82\x8A\x01a\x16\x1AV[\x94PP``a\x16\xC4\x89\x82\x8A\x01a\x16.V[\x93PP`\x80a\x16\xD5\x89\x82\x8A\x01a\x16BV[\x92PP`\xA0a\x16\xE6\x89\x82\x8A\x01a\x16VV[\x91PP\x92\x95P\x92\x95P\x92\x95V[_``\x82\x01\x90Pa\x17\x06_\x83\x01\x86a\x11\xDEV[a\x17\x13` \x83\x01\x85a\x11\xEDV[a\x17 `@\x83\x01\x84a\x11\xEDV[\x94\x93PPPPV[_\x80`@\x83\x85\x03\x12\x15a\x17>Wa\x17=a\x0B\xB0V[[_a\x17K\x85\x82\x86\x01a\x12#V[\x92PP` a\x17\\\x85\x82\x86\x01a\x12#V[\x91PP\x92P\x92\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x17\x9D\x82a\x0FeV[\x91Pa\x17\xA8\x83a\x0FeV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x17\xC0Wa\x17\xBFa\x17fV[[\x92\x91PPV[a\x17\xCF\x81a\x0FeV[\x82RPPV[_`@\x82\x01\x90Pa\x17\xE8_\x83\x01\x85a\x11\xEDV[a\x17\xF5` \x83\x01\x84a\x17\xC6V[\x93\x92PPPV[_` \x82\x01\x90Pa\x18\x0F_\x83\x01\x84a\x17\xC6V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x18*Wa\x18)a\x0B\xB0V[[_a\x187\x84\x82\x85\x01a\x16VV[\x91PP\x92\x91PPV[_\x81`\x0F\x0B\x90P\x91\x90PV[a\x18U\x81a\x18@V[\x82RPPV[_\x81\x90P\x91\x90PV[_a\x18~a\x18ya\x18t\x84a\x18[V[a\x12bV[a\x0FeV[\x90P\x91\x90PV[a\x18\x8E\x81a\x18dV[\x82RPPV[_`\x80\x82\x01\x90Pa\x18\xA7_\x83\x01\x87a\x18LV[a\x18\xB4` \x83\x01\x86a\x18LV[a\x18\xC1`@\x83\x01\x85a\x17\xC6V[a\x18\xCE``\x83\x01\x84a\x18\x85V[\x95\x94PPPPPV[_` \x82\x01\x90Pa\x18\xEA_\x83\x01\x84a\x11\xEDV[\x92\x91PPV[_\x81\x90P\x92\x91PPV[_a\x19\x04\x82a\x14\xF9V[a\x19\x0E\x81\x85a\x18\xF0V[\x93Pa\x19\x1E\x81\x85` \x86\x01a\x15\x13V[\x80\x84\x01\x91PP\x92\x91PPV[_a\x195\x82\x84a\x18\xFAV[\x91P\x81\x90P\x92\x91PPV\xFE\xA2dipfsX\"\x12 \x1A;\xFE\x9F\xB1\xF4\xFD_\x13\xD1t\xB1\x9D\xFAU\xDB\x04#\xBE!\xF4S!\xB3mDHL\xEFg\xFD\xF0dsolcC\0\x08\x15\x003";
    /// The bytecode of the contract.
    pub static WSTETHCURVELIQUIDATOR_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R`\x046\x10a\0,W_5`\xE0\x1C\x80cl\xB0D)\x14a\x007W\x80c\xF0O'\x07\x14a\0_Wa\x003V[6a\x003W\0[_\x80\xFD[4\x80\x15a\0BW_\x80\xFD[Pa\0]`\x04\x806\x03\x81\x01\x90a\0X\x91\x90a\r&V[a\0\x87V[\0[4\x80\x15a\0jW_\x80\xFD[Pa\0\x85`\x04\x806\x03\x81\x01\x90a\0\x80\x91\x90a\x10\xDDV[a\x02\xFBV[\0[_`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0\xA3Wa\0\xA2a\r\xC3V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\xD1W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81_\x81Q\x81\x10a\x01\x08Wa\x01\x07a\x11\xB1V[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP_`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01^Wa\x01]a\r\xC3V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\x8CW\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA0\xD5\xF5\x99\x89\x89`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01\xEA\x92\x91\x90a\x11\xFCV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\x05W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02)\x91\x90a\x127V[\x81_\x81Q\x81\x10a\x02<Wa\x02;a\x11\xB1V[[` \x02` \x01\x01\x81\x81RPPs\xBA\x12\"\"\"\"\x8D\x8B\xA4E\x95\x8Au\xA0pMVk\xF2\xC8s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\\8D\x9E0\x84\x84\x8C\x8C\x8C\x8C\x8C\x8C`@Q` \x01a\x02\x96\x96\x95\x94\x93\x92\x91\x90a\x12\xFBV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x85c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\xC4\x94\x93\x92\x91\x90a\x15sV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02\xDBW_\x80\xFD[PZ\xF1\x15\x80\x15a\x02\xEDW=_\x80>=_\xFD[PPPPPPPPPPPPV[_\x83_\x81Q\x81\x10a\x03\x0FWa\x03\x0Ea\x11\xB1V[[` \x02` \x01\x01Q\x90P_\x80_\x80_\x80\x87\x80` \x01\x90Q\x81\x01\x90a\x033\x91\x90a\x16jV[\x95P\x95P\x95P\x95P\x95P\x95P_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16ch\xD8h\r\x880`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\x9B\x92\x91\x90a\x11\xFCV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xB6W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xDA\x91\x90a\x127V[\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c%\x84\x0E\xDA\x88\x880`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x049\x93\x92\x91\x90a\x16\xF3V[`@\x80Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x04TW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04x\x91\x90a\x17(V[PP_\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16ch\xD8h\r\x8A0`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04\xD7\x92\x91\x90a\x11\xFCV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\xF2W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\x16\x91\x90a\x127V[a\x05 \x91\x90a\x17\x93V[\x90P\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xEFi;\xED0\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05]\x92\x91\x90a\x17\xD5V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05tW_\x80\xFD[PZ\xF1\x15\x80\x15a\x05\x86W=_\x80>=_\xFD[PPPP_a\x05\x97\x85\x88\x84\x87a\x06\x83V[\x90P_\x8A\x82a\x05\xA6\x91\x90a\x17\x93V[\x90Pa\x06\x07s\xBA\x12\"\"\"\"\x8D\x8B\xA4E\x95\x8Au\xA0pMVk\xF2\xC8\x8C\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x07\xB9\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\x06r\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x07\xB9\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[PPPPPPPPPPPPPPPV[_\x80\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xDE\x0E\x9A>\x85`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06\xDE\x91\x90a\x17\xFCV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x06\xFAW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\x1E\x91\x90a\x127V[\x90P_a\x07-\x87\x87\x84\x87a\x088V[\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD0\xE3\r\xB0\x82`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x85\x88\x80;\x15\x80\x15a\x07\x95W_\x80\xFD[PZ\xF1\x15\x80\x15a\x07\xA7W=_\x80>=_\xFD[PPPPP\x80\x92PPP\x94\x93PPPPV[a\x083\x83\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB\x85\x85`@Q`$\x01a\x07\xEC\x92\x91\x90a\x17\xD5V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91P`\xE0\x1B` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPPa\tcV[PPPV[_\x80\x85_\x1C\x90P_\x81\x90P_\x80\x85a\x08RW_`\x01a\x08VV[`\x01_[\x91P\x91P\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x85\x89`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x08\x95\x92\x91\x90a\x17\xD5V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x08\xB1W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\xD5\x91\x90a\x18\x15V[P\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c=\xF0!$\x83\x83\x8A_`@Q\x85c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\t\x15\x94\x93\x92\x91\x90a\x18\x94V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\t1W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\tU\x91\x90a\x127V[\x94PPPPP\x94\x93PPPPV[_a\t\x8D\x82\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\t\xF8\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P_\x81Q\x14\x15\x80\x15a\t\xB1WP\x80\x80` \x01\x90Q\x81\x01\x90a\t\xAF\x91\x90a\x18\x15V[\x15[\x15a\t\xF3W\x82`@Q\x7FRt\xAF\xE7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\t\xEA\x91\x90a\x18\xD7V[`@Q\x80\x91\x03\x90\xFD[PPPV[``a\n\x05\x83\x83_a\n\rV[\x90P\x92\x91PPV[``\x81G\x10\x15a\nTW0`@Q\x7F\xCDx`Y\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\nK\x91\x90a\x18\xD7V[`@Q\x80\x91\x03\x90\xFD[_\x80\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x86`@Qa\n|\x91\x90a\x19*V[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\n\xB6W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\n\xBBV[``\x91P[P\x91P\x91Pa\n\xCB\x86\x83\x83a\n\xD6V[\x92PPP\x93\x92PPPV[``\x82a\n\xEBWa\n\xE6\x82a\x0BcV[a\x0B[V[_\x82Q\x14\x80\x15a\x0B\x11WP_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14[\x15a\x0BSW\x83`@Q\x7F\x99\x96\xB3\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0BJ\x91\x90a\x18\xD7V[`@Q\x80\x91\x03\x90\xFD[\x81\x90Pa\x0B\\V[[\x93\x92PPPV[_\x81Q\x11\x15a\x0BuW\x80Q\x80\x82` \x01\xFD[`@Q\x7F\x14%\xEAB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_`\xFF\x82\x16\x90P\x91\x90PV[a\x0B\xCD\x81a\x0B\xB8V[\x81\x14a\x0B\xD7W_\x80\xFD[PV[_\x815\x90Pa\x0B\xE8\x81a\x0B\xC4V[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x0C\x17\x82a\x0B\xEEV[\x90P\x91\x90PV[a\x0C'\x81a\x0C\rV[\x81\x14a\x0C1W_\x80\xFD[PV[_\x815\x90Pa\x0CB\x81a\x0C\x1EV[\x92\x91PPV[_a\x0CR\x82a\x0C\rV[\x90P\x91\x90PV[a\x0Cb\x81a\x0CHV[\x81\x14a\x0ClW_\x80\xFD[PV[_\x815\x90Pa\x0C}\x81a\x0CYV[\x92\x91PPV[_a\x0C\x8D\x82a\x0C\rV[\x90P\x91\x90PV[a\x0C\x9D\x81a\x0C\x83V[\x81\x14a\x0C\xA7W_\x80\xFD[PV[_\x815\x90Pa\x0C\xB8\x81a\x0C\x94V[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x0C\xD0\x81a\x0C\xBEV[\x81\x14a\x0C\xDAW_\x80\xFD[PV[_\x815\x90Pa\x0C\xEB\x81a\x0C\xC7V[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\r\x05\x81a\x0C\xF1V[\x81\x14a\r\x0FW_\x80\xFD[PV[_\x815\x90Pa\r \x81a\x0C\xFCV[\x92\x91PPV[_\x80_\x80_\x80`\xC0\x87\x89\x03\x12\x15a\r@Wa\r?a\x0B\xB0V[[_a\rM\x89\x82\x8A\x01a\x0B\xDAV[\x96PP` a\r^\x89\x82\x8A\x01a\x0C4V[\x95PP`@a\ro\x89\x82\x8A\x01a\x0CoV[\x94PP``a\r\x80\x89\x82\x8A\x01a\x0C\xAAV[\x93PP`\x80a\r\x91\x89\x82\x8A\x01a\x0C\xDDV[\x92PP`\xA0a\r\xA2\x89\x82\x8A\x01a\r\x12V[\x91PP\x92\x95P\x92\x95P\x92\x95V[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\r\xF9\x82a\r\xB3V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x0E\x18Wa\x0E\x17a\r\xC3V[[\x80`@RPPPV[_a\x0E*a\x0B\xA7V[\x90Pa\x0E6\x82\x82a\r\xF0V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0EUWa\x0ETa\r\xC3V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_a\x0Et\x82a\x0C\rV[\x90P\x91\x90PV[a\x0E\x84\x81a\x0EjV[\x81\x14a\x0E\x8EW_\x80\xFD[PV[_\x815\x90Pa\x0E\x9F\x81a\x0E{V[\x92\x91PPV[_a\x0E\xB7a\x0E\xB2\x84a\x0E;V[a\x0E!V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x0E\xDAWa\x0E\xD9a\x0EfV[[\x83[\x81\x81\x10\x15a\x0F\x03W\x80a\x0E\xEF\x88\x82a\x0E\x91V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x0E\xDCV[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x0F!Wa\x0F a\r\xAFV[[\x815a\x0F1\x84\x82` \x86\x01a\x0E\xA5V[\x91PP\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0FTWa\x0FSa\r\xC3V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[a\x0Fw\x81a\x0FeV[\x81\x14a\x0F\x81W_\x80\xFD[PV[_\x815\x90Pa\x0F\x92\x81a\x0FnV[\x92\x91PPV[_a\x0F\xAAa\x0F\xA5\x84a\x0F:V[a\x0E!V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x0F\xCDWa\x0F\xCCa\x0EfV[[\x83[\x81\x81\x10\x15a\x0F\xF6W\x80a\x0F\xE2\x88\x82a\x0F\x84V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x0F\xCFV[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x10\x14Wa\x10\x13a\r\xAFV[[\x815a\x10$\x84\x82` \x86\x01a\x0F\x98V[\x91PP\x92\x91PPV[_\x80\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x10KWa\x10Ja\r\xC3V[[a\x10T\x82a\r\xB3V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a\x10\x81a\x10|\x84a\x101V[a\x0E!V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x10\x9DWa\x10\x9Ca\x10-V[[a\x10\xA8\x84\x82\x85a\x10aV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x10\xC4Wa\x10\xC3a\r\xAFV[[\x815a\x10\xD4\x84\x82` \x86\x01a\x10oV[\x91PP\x92\x91PPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x10\xF5Wa\x10\xF4a\x0B\xB0V[[_\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\x12Wa\x11\x11a\x0B\xB4V[[a\x11\x1E\x87\x82\x88\x01a\x0F\rV[\x94PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11?Wa\x11>a\x0B\xB4V[[a\x11K\x87\x82\x88\x01a\x10\0V[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11lWa\x11ka\x0B\xB4V[[a\x11x\x87\x82\x88\x01a\x10\0V[\x92PP``\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\x99Wa\x11\x98a\x0B\xB4V[[a\x11\xA5\x87\x82\x88\x01a\x10\xB0V[\x91PP\x92\x95\x91\x94P\x92PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[a\x11\xE7\x81a\x0B\xB8V[\x82RPPV[a\x11\xF6\x81a\x0C\rV[\x82RPPV[_`@\x82\x01\x90Pa\x12\x0F_\x83\x01\x85a\x11\xDEV[a\x12\x1C` \x83\x01\x84a\x11\xEDV[\x93\x92PPPV[_\x81Q\x90Pa\x121\x81a\x0FnV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x12LWa\x12Ka\x0B\xB0V[[_a\x12Y\x84\x82\x85\x01a\x12#V[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[_a\x12\x85a\x12\x80a\x12{\x84a\x0B\xEEV[a\x12bV[a\x0B\xEEV[\x90P\x91\x90PV[_a\x12\x96\x82a\x12kV[\x90P\x91\x90PV[_a\x12\xA7\x82a\x12\x8CV[\x90P\x91\x90PV[a\x12\xB7\x81a\x12\x9DV[\x82RPPV[_a\x12\xC7\x82a\x12\x8CV[\x90P\x91\x90PV[a\x12\xD7\x81a\x12\xBDV[\x82RPPV[a\x12\xE6\x81a\x0C\xBEV[\x82RPPV[a\x12\xF5\x81a\x0C\xF1V[\x82RPPV[_`\xC0\x82\x01\x90Pa\x13\x0E_\x83\x01\x89a\x11\xDEV[a\x13\x1B` \x83\x01\x88a\x11\xEDV[a\x13(`@\x83\x01\x87a\x12\xAEV[a\x135``\x83\x01\x86a\x12\xCEV[a\x13B`\x80\x83\x01\x85a\x12\xDDV[a\x13O`\xA0\x83\x01\x84a\x12\xECV[\x97\x96PPPPPPPV[_a\x13d\x82a\x12\x8CV[\x90P\x91\x90PV[a\x13t\x81a\x13ZV[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_a\x13\xAD\x82a\x12\x8CV[\x90P\x91\x90PV[a\x13\xBD\x81a\x13\xA3V[\x82RPPV[_a\x13\xCE\x83\x83a\x13\xB4V[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x13\xF0\x82a\x13zV[a\x13\xFA\x81\x85a\x13\x84V[\x93Pa\x14\x05\x83a\x13\x94V[\x80_[\x83\x81\x10\x15a\x145W\x81Qa\x14\x1C\x88\x82a\x13\xC3V[\x97Pa\x14'\x83a\x13\xDAV[\x92PP`\x01\x81\x01\x90Pa\x14\x08V[P\x85\x93PPPP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x14t\x81a\x0FeV[\x82RPPV[_a\x14\x85\x83\x83a\x14kV[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x14\xA7\x82a\x14BV[a\x14\xB1\x81\x85a\x14LV[\x93Pa\x14\xBC\x83a\x14\\V[\x80_[\x83\x81\x10\x15a\x14\xECW\x81Qa\x14\xD3\x88\x82a\x14zV[\x97Pa\x14\xDE\x83a\x14\x91V[\x92PP`\x01\x81\x01\x90Pa\x14\xBFV[P\x85\x93PPPP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_[\x83\x81\x10\x15a\x150W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x15\x15V[_\x84\x84\x01RPPPPV[_a\x15E\x82a\x14\xF9V[a\x15O\x81\x85a\x15\x03V[\x93Pa\x15_\x81\x85` \x86\x01a\x15\x13V[a\x15h\x81a\r\xB3V[\x84\x01\x91PP\x92\x91PPV[_`\x80\x82\x01\x90Pa\x15\x86_\x83\x01\x87a\x13kV[\x81\x81\x03` \x83\x01Ra\x15\x98\x81\x86a\x13\xE6V[\x90P\x81\x81\x03`@\x83\x01Ra\x15\xAC\x81\x85a\x14\x9DV[\x90P\x81\x81\x03``\x83\x01Ra\x15\xC0\x81\x84a\x15;V[\x90P\x95\x94PPPPPV[_\x81Q\x90Pa\x15\xD9\x81a\x0B\xC4V[\x92\x91PPV[_a\x15\xE9\x82a\x0B\xEEV[\x90P\x91\x90PV[a\x15\xF9\x81a\x15\xDFV[\x81\x14a\x16\x03W_\x80\xFD[PV[_\x81Q\x90Pa\x16\x14\x81a\x15\xF0V[\x92\x91PPV[_\x81Q\x90Pa\x16(\x81a\x0CYV[\x92\x91PPV[_\x81Q\x90Pa\x16<\x81a\x0C\x94V[\x92\x91PPV[_\x81Q\x90Pa\x16P\x81a\x0C\xC7V[\x92\x91PPV[_\x81Q\x90Pa\x16d\x81a\x0C\xFCV[\x92\x91PPV[_\x80_\x80_\x80`\xC0\x87\x89\x03\x12\x15a\x16\x84Wa\x16\x83a\x0B\xB0V[[_a\x16\x91\x89\x82\x8A\x01a\x15\xCBV[\x96PP` a\x16\xA2\x89\x82\x8A\x01a\x16\x06V[\x95PP`@a\x16\xB3\x89\x82\x8A\x01a\x16\x1AV[\x94PP``a\x16\xC4\x89\x82\x8A\x01a\x16.V[\x93PP`\x80a\x16\xD5\x89\x82\x8A\x01a\x16BV[\x92PP`\xA0a\x16\xE6\x89\x82\x8A\x01a\x16VV[\x91PP\x92\x95P\x92\x95P\x92\x95V[_``\x82\x01\x90Pa\x17\x06_\x83\x01\x86a\x11\xDEV[a\x17\x13` \x83\x01\x85a\x11\xEDV[a\x17 `@\x83\x01\x84a\x11\xEDV[\x94\x93PPPPV[_\x80`@\x83\x85\x03\x12\x15a\x17>Wa\x17=a\x0B\xB0V[[_a\x17K\x85\x82\x86\x01a\x12#V[\x92PP` a\x17\\\x85\x82\x86\x01a\x12#V[\x91PP\x92P\x92\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x17\x9D\x82a\x0FeV[\x91Pa\x17\xA8\x83a\x0FeV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x17\xC0Wa\x17\xBFa\x17fV[[\x92\x91PPV[a\x17\xCF\x81a\x0FeV[\x82RPPV[_`@\x82\x01\x90Pa\x17\xE8_\x83\x01\x85a\x11\xEDV[a\x17\xF5` \x83\x01\x84a\x17\xC6V[\x93\x92PPPV[_` \x82\x01\x90Pa\x18\x0F_\x83\x01\x84a\x17\xC6V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x18*Wa\x18)a\x0B\xB0V[[_a\x187\x84\x82\x85\x01a\x16VV[\x91PP\x92\x91PPV[_\x81`\x0F\x0B\x90P\x91\x90PV[a\x18U\x81a\x18@V[\x82RPPV[_\x81\x90P\x91\x90PV[_a\x18~a\x18ya\x18t\x84a\x18[V[a\x12bV[a\x0FeV[\x90P\x91\x90PV[a\x18\x8E\x81a\x18dV[\x82RPPV[_`\x80\x82\x01\x90Pa\x18\xA7_\x83\x01\x87a\x18LV[a\x18\xB4` \x83\x01\x86a\x18LV[a\x18\xC1`@\x83\x01\x85a\x17\xC6V[a\x18\xCE``\x83\x01\x84a\x18\x85V[\x95\x94PPPPPV[_` \x82\x01\x90Pa\x18\xEA_\x83\x01\x84a\x11\xEDV[\x92\x91PPV[_\x81\x90P\x92\x91PPV[_a\x19\x04\x82a\x14\xF9V[a\x19\x0E\x81\x85a\x18\xF0V[\x93Pa\x19\x1E\x81\x85` \x86\x01a\x15\x13V[\x80\x84\x01\x91PP\x92\x91PPV[_a\x195\x82\x84a\x18\xFAV[\x91P\x81\x90P\x92\x91PPV\xFE\xA2dipfsX\"\x12 \x1A;\xFE\x9F\xB1\xF4\xFD_\x13\xD1t\xB1\x9D\xFAU\xDB\x04#\xBE!\xF4S!\xB3mDHL\xEFg\xFD\xF0dsolcC\0\x08\x15\x003";
    /// The deployed bytecode of the contract.
    pub static WSTETHCURVELIQUIDATOR_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct WstEthCurveLiquidator<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for WstEthCurveLiquidator<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for WstEthCurveLiquidator<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for WstEthCurveLiquidator<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for WstEthCurveLiquidator<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(WstEthCurveLiquidator))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> WstEthCurveLiquidator<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    WSTETHCURVELIQUIDATOR_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                WSTETHCURVELIQUIDATOR_ABI.clone(),
                WSTETHCURVELIQUIDATOR_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `liquidate` (0x6cb04429) function
        pub fn liquidate(
            &self,
            ilk_index: u8,
            user: ::ethers::core::types::Address,
            collateral_token: ::ethers::core::types::Address,
            gem_join: ::ethers::core::types::Address,
            pool_id: [u8; 32],
            weth_is_token_0: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [108, 176, 68, 41],
                    (
                        ilk_index,
                        user,
                        collateral_token,
                        gem_join,
                        pool_id,
                        weth_is_token_0,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `receiveFlashLoan` (0xf04f2707) function
        pub fn receive_flash_loan(
            &self,
            p0: ::std::vec::Vec<::ethers::core::types::Address>,
            amounts: ::std::vec::Vec<::ethers::core::types::U256>,
            p2: ::std::vec::Vec<::ethers::core::types::U256>,
            user_data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([240, 79, 39, 7], (p0, amounts, p2, user_data))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for WstEthCurveLiquidator<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `AddressEmptyCode` with signature `AddressEmptyCode(address)` and selector `0x9996b315`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "AddressEmptyCode", abi = "AddressEmptyCode(address)")]
    pub struct AddressEmptyCode {
        pub target: ::ethers::core::types::Address,
    }
    ///Custom Error type `AddressInsufficientBalance` with signature `AddressInsufficientBalance(address)` and selector `0xcd786059`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "AddressInsufficientBalance",
        abi = "AddressInsufficientBalance(address)"
    )]
    pub struct AddressInsufficientBalance {
        pub account: ::ethers::core::types::Address,
    }
    ///Custom Error type `FailedInnerCall` with signature `FailedInnerCall()` and selector `0x1425ea42`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "FailedInnerCall", abi = "FailedInnerCall()")]
    pub struct FailedInnerCall;
    ///Custom Error type `SafeERC20FailedOperation` with signature `SafeERC20FailedOperation(address)` and selector `0x5274afe7`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "SafeERC20FailedOperation",
        abi = "SafeERC20FailedOperation(address)"
    )]
    pub struct SafeERC20FailedOperation {
        pub token: ::ethers::core::types::Address,
    }
    ///Container type for all of the contract's custom errors
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        serde::Serialize,
        serde::Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub enum WstEthCurveLiquidatorErrors {
        AddressEmptyCode(AddressEmptyCode),
        AddressInsufficientBalance(AddressInsufficientBalance),
        FailedInnerCall(FailedInnerCall),
        SafeERC20FailedOperation(SafeERC20FailedOperation),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for WstEthCurveLiquidatorErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded) = <AddressEmptyCode as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::AddressEmptyCode(decoded));
            }
            if let Ok(decoded) = <AddressInsufficientBalance as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::AddressInsufficientBalance(decoded));
            }
            if let Ok(decoded) = <FailedInnerCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::FailedInnerCall(decoded));
            }
            if let Ok(decoded) = <SafeERC20FailedOperation as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::SafeERC20FailedOperation(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for WstEthCurveLiquidatorErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::AddressEmptyCode(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::AddressInsufficientBalance(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::FailedInnerCall(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SafeERC20FailedOperation(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for WstEthCurveLiquidatorErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <AddressEmptyCode as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <AddressInsufficientBalance as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <FailedInnerCall as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <SafeERC20FailedOperation as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for WstEthCurveLiquidatorErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::AddressEmptyCode(element) => ::core::fmt::Display::fmt(element, f),
                Self::AddressInsufficientBalance(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::FailedInnerCall(element) => ::core::fmt::Display::fmt(element, f),
                Self::SafeERC20FailedOperation(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for WstEthCurveLiquidatorErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<AddressEmptyCode> for WstEthCurveLiquidatorErrors {
        fn from(value: AddressEmptyCode) -> Self {
            Self::AddressEmptyCode(value)
        }
    }
    impl ::core::convert::From<AddressInsufficientBalance>
    for WstEthCurveLiquidatorErrors {
        fn from(value: AddressInsufficientBalance) -> Self {
            Self::AddressInsufficientBalance(value)
        }
    }
    impl ::core::convert::From<FailedInnerCall> for WstEthCurveLiquidatorErrors {
        fn from(value: FailedInnerCall) -> Self {
            Self::FailedInnerCall(value)
        }
    }
    impl ::core::convert::From<SafeERC20FailedOperation>
    for WstEthCurveLiquidatorErrors {
        fn from(value: SafeERC20FailedOperation) -> Self {
            Self::SafeERC20FailedOperation(value)
        }
    }
    ///Container type for all input parameters for the `liquidate` function with signature `liquidate(uint8,address,address,address,bytes32,bool)` and selector `0x6cb04429`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "liquidate",
        abi = "liquidate(uint8,address,address,address,bytes32,bool)"
    )]
    pub struct LiquidateCall {
        pub ilk_index: u8,
        pub user: ::ethers::core::types::Address,
        pub collateral_token: ::ethers::core::types::Address,
        pub gem_join: ::ethers::core::types::Address,
        pub pool_id: [u8; 32],
        pub weth_is_token_0: bool,
    }
    ///Container type for all input parameters for the `receiveFlashLoan` function with signature `receiveFlashLoan(address[],uint256[],uint256[],bytes)` and selector `0xf04f2707`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "receiveFlashLoan",
        abi = "receiveFlashLoan(address[],uint256[],uint256[],bytes)"
    )]
    pub struct ReceiveFlashLoanCall {
        pub p0: ::std::vec::Vec<::ethers::core::types::Address>,
        pub amounts: ::std::vec::Vec<::ethers::core::types::U256>,
        pub p2: ::std::vec::Vec<::ethers::core::types::U256>,
        pub user_data: ::ethers::core::types::Bytes,
    }
    ///Container type for all of the contract's call
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        serde::Serialize,
        serde::Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub enum WstEthCurveLiquidatorCalls {
        Liquidate(LiquidateCall),
        ReceiveFlashLoan(ReceiveFlashLoanCall),
    }
    impl ::ethers::core::abi::AbiDecode for WstEthCurveLiquidatorCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <LiquidateCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Liquidate(decoded));
            }
            if let Ok(decoded) = <ReceiveFlashLoanCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::ReceiveFlashLoan(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for WstEthCurveLiquidatorCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Liquidate(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ReceiveFlashLoan(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for WstEthCurveLiquidatorCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Liquidate(element) => ::core::fmt::Display::fmt(element, f),
                Self::ReceiveFlashLoan(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<LiquidateCall> for WstEthCurveLiquidatorCalls {
        fn from(value: LiquidateCall) -> Self {
            Self::Liquidate(value)
        }
    }
    impl ::core::convert::From<ReceiveFlashLoanCall> for WstEthCurveLiquidatorCalls {
        fn from(value: ReceiveFlashLoanCall) -> Self {
            Self::ReceiveFlashLoan(value)
        }
    }
}
