pub use we_eth_curve_liquidator::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod we_eth_curve_liquidator {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::Some(::ethers::core::abi::ethabi::Constructor {
                inputs: ::std::vec![
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("_liquidation"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("contract Liquidation"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("_treasury"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("address"),
                        ),
                    },
                ],
            }),
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("liquidate"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("liquidate"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("user"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("collateralToken"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract IERC20"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("gemJoin"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract GemJoin"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("pool"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("wethIsToken0"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("uniswapV3SwapCallback"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned(
                                "uniswapV3SwapCallback",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Int(256usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("int256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("amount1Delta"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Int(256usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("int256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("data"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static WEETHCURVELIQUIDATOR_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\xE0`@R4\x80\x15b\0\0\x10W_\x80\xFD[P`@Qb\0\x12\xE08\x03\x80b\0\x12\xE0\x839\x81\x81\x01`@R\x81\x01\x90b\0\x006\x91\x90b\0\x02\xABV[\x81\x81\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xA0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cu5\xD2F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\0\xB6W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\0\xDC\x91\x90b\0\x032V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xC0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPs\x7F9\xC5\x81\xF5\x95\xB5<\\\xB1\x9B\xD0\xB3\xF8\xDAl\x93^,\xA0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3`\xA0Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x01\xB6\x92\x91\x90b\0\x03\x8DV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15b\0\x01\xD3W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x01\xF9\x91\x90b\0\x03\xF2V[PPPPPb\0\x04\"V[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_b\0\x023\x82b\0\x02\x08V[\x90P\x91\x90PV[_b\0\x02F\x82b\0\x02'V[\x90P\x91\x90PV[b\0\x02X\x81b\0\x02:V[\x81\x14b\0\x02cW_\x80\xFD[PV[_\x81Q\x90Pb\0\x02v\x81b\0\x02MV[\x92\x91PPV[b\0\x02\x87\x81b\0\x02'V[\x81\x14b\0\x02\x92W_\x80\xFD[PV[_\x81Q\x90Pb\0\x02\xA5\x81b\0\x02|V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15b\0\x02\xC4Wb\0\x02\xC3b\0\x02\x04V[[_b\0\x02\xD3\x85\x82\x86\x01b\0\x02fV[\x92PP` b\0\x02\xE6\x85\x82\x86\x01b\0\x02\x95V[\x91PP\x92P\x92\x90PV[_b\0\x02\xFC\x82b\0\x02'V[\x90P\x91\x90PV[b\0\x03\x0E\x81b\0\x02\xF0V[\x81\x14b\0\x03\x19W_\x80\xFD[PV[_\x81Q\x90Pb\0\x03,\x81b\0\x03\x03V[\x92\x91PPV[_` \x82\x84\x03\x12\x15b\0\x03JWb\0\x03Ib\0\x02\x04V[[_b\0\x03Y\x84\x82\x85\x01b\0\x03\x1CV[\x91PP\x92\x91PPV[b\0\x03m\x81b\0\x02'V[\x82RPPV[_\x81\x90P\x91\x90PV[b\0\x03\x87\x81b\0\x03sV[\x82RPPV[_`@\x82\x01\x90Pb\0\x03\xA2_\x83\x01\x85b\0\x03bV[b\0\x03\xB1` \x83\x01\x84b\0\x03|V[\x93\x92PPPV[_\x81\x15\x15\x90P\x91\x90PV[b\0\x03\xCE\x81b\0\x03\xB8V[\x81\x14b\0\x03\xD9W_\x80\xFD[PV[_\x81Q\x90Pb\0\x03\xEC\x81b\0\x03\xC3V[\x92\x91PPV[_` \x82\x84\x03\x12\x15b\0\x04\nWb\0\x04\tb\0\x02\x04V[[_b\0\x04\x19\x84\x82\x85\x01b\0\x03\xDCV[\x91PP\x92\x91PPV[`\x80Q`\xA0Q`\xC0Qa\x0E\x90b\0\x04P_9_a\x02z\x01R_\x81\x81`\x91\x01Ra\x03\n\x01R_PPa\x0E\x90_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xFAF\x1E3\x14a\08W\x80c\xFEpz.\x14a\0TW[_\x80\xFD[a\0R`\x04\x806\x03\x81\x01\x90a\0M\x91\x90a\x06RV[a\0pV[\0[a\0n`\x04\x806\x03\x81\x01\x90a\0i\x91\x90a\x07\xC8V[a\x03\x07V[\0[_\x80_\x80_\x86\x86\x81\x01\x90a\0\x84\x91\x90a\x08zV[\x94P\x94P\x94P\x94P\x94P_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c%\x84\x0E\xDA_\x880`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\0\xEC\x93\x92\x91\x90a\tNV[`@\x80Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x01\x07W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01+\x91\x90a\t\xB6V[\x91PP\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xEFi;\xED0\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01i\x92\x91\x90a\n\x03V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\x80W_\x80\xFD[PZ\xF1\x15\x80\x15a\x01\x92W=_\x80>=_\xFD[PPPP_\x89\x90P_a\x01\xA7\x85\x88\x84\x87a\x04\x92V[\x90P_\x82\x82a\x01\xB6\x91\x90a\nWV[\x90Ps\xC0*\xAA9\xB2#\xFE\x8D\n\x0E\\O'\xEA\xD9\x08<ul\xC2s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x85`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\x07\x92\x91\x90a\n\x03V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x02#W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02G\x91\x90a\n\x9EV[Ps\xC0*\xAA9\xB2#\xFE\x8D\n\x0E\\O'\xEA\xD9\x08<ul\xC2s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\xB7\x92\x91\x90a\n\x03V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x02\xD3W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xF7\x91\x90a\n\x9EV[PPPPPPPPPPPPPPV[_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA0\xD5\xF5\x99_\x88`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03c\x92\x91\x90a\n\xC9V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03~W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xA2\x91\x90a\n\xF0V[\x90Ps\x10\x980\xA1\xAA\xAD`[\xBF\x02\xA9\xDF\xA7\xB0\xB9.\xC2\xFB}\xAAs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x12\x8A\xCB\x080_\x84a\x03\xE0\x90a\x0B\x1BV[`\x01s\xFF\xFD\x89c\xEF\xD1\xFCjPd\x88I]\x95\x1DRc\x98\x8D&a\x04\x01\x91\x90a\x0BaV[\x8B\x8B\x8B\x8B\x8B`@Q` \x01a\x04\x1A\x95\x94\x93\x92\x91\x90a\x0C)V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04I\x95\x94\x93\x92\x91\x90a\r\"V[`@\x80Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x04dW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x88\x91\x90a\r\x8EV[PPPPPPPPV[_\x80\x85\x90P_\x80\x84a\x04\xA6W_`\x01a\x04\xAAV[`\x01_[\x91P\x91P\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x89\x88`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04\xE9\x92\x91\x90a\n\x03V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05\x05W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05)\x91\x90a\n\x9EV[P\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c=\xF0!$\x83\x83\x89_`@Q\x85c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05i\x94\x93\x92\x91\x90a\x0E\x17V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05\x85W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xA9\x91\x90a\n\xF0V[\x93PPPP\x94\x93PPPPV[_\x80\xFD[_\x80\xFD[_\x81\x90P\x91\x90PV[a\x05\xD0\x81a\x05\xBEV[\x81\x14a\x05\xDAW_\x80\xFD[PV[_\x815\x90Pa\x05\xEB\x81a\x05\xC7V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\x06\x12Wa\x06\x11a\x05\xF1V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06/Wa\x06.a\x05\xF5V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x06KWa\x06Ja\x05\xF9V[[\x92P\x92\x90PV[_\x80_\x80``\x85\x87\x03\x12\x15a\x06jWa\x06ia\x05\xB6V[[_a\x06w\x87\x82\x88\x01a\x05\xDDV[\x94PP` a\x06\x88\x87\x82\x88\x01a\x05\xDDV[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\xA9Wa\x06\xA8a\x05\xBAV[[a\x06\xB5\x87\x82\x88\x01a\x05\xFDV[\x92P\x92PP\x92\x95\x91\x94P\x92PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x06\xEC\x82a\x06\xC3V[\x90P\x91\x90PV[a\x06\xFC\x81a\x06\xE2V[\x81\x14a\x07\x06W_\x80\xFD[PV[_\x815\x90Pa\x07\x17\x81a\x06\xF3V[\x92\x91PPV[_a\x07'\x82a\x06\xE2V[\x90P\x91\x90PV[a\x077\x81a\x07\x1DV[\x81\x14a\x07AW_\x80\xFD[PV[_\x815\x90Pa\x07R\x81a\x07.V[\x92\x91PPV[_a\x07b\x82a\x06\xE2V[\x90P\x91\x90PV[a\x07r\x81a\x07XV[\x81\x14a\x07|W_\x80\xFD[PV[_\x815\x90Pa\x07\x8D\x81a\x07iV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x07\xA7\x81a\x07\x93V[\x81\x14a\x07\xB1W_\x80\xFD[PV[_\x815\x90Pa\x07\xC2\x81a\x07\x9EV[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x07\xE1Wa\x07\xE0a\x05\xB6V[[_a\x07\xEE\x88\x82\x89\x01a\x07\tV[\x95PP` a\x07\xFF\x88\x82\x89\x01a\x07DV[\x94PP`@a\x08\x10\x88\x82\x89\x01a\x07\x7FV[\x93PP``a\x08!\x88\x82\x89\x01a\x07\tV[\x92PP`\x80a\x082\x88\x82\x89\x01a\x07\xB4V[\x91PP\x92\x95P\x92\x95\x90\x93PV[_a\x08I\x82a\x06\xC3V[\x90P\x91\x90PV[a\x08Y\x81a\x08?V[\x81\x14a\x08cW_\x80\xFD[PV[_\x815\x90Pa\x08t\x81a\x08PV[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x08\x93Wa\x08\x92a\x05\xB6V[[_a\x08\xA0\x88\x82\x89\x01a\x08fV[\x95PP` a\x08\xB1\x88\x82\x89\x01a\x07DV[\x94PP`@a\x08\xC2\x88\x82\x89\x01a\x07\x7FV[\x93PP``a\x08\xD3\x88\x82\x89\x01a\x08fV[\x92PP`\x80a\x08\xE4\x88\x82\x89\x01a\x07\xB4V[\x91PP\x92\x95P\x92\x95\x90\x93PV[_\x81\x90P\x91\x90PV[_`\xFF\x82\x16\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[_a\t)a\t$a\t\x1F\x84a\x08\xF1V[a\t\x06V[a\x08\xFAV[\x90P\x91\x90PV[a\t9\x81a\t\x0FV[\x82RPPV[a\tH\x81a\x06\xE2V[\x82RPPV[_``\x82\x01\x90Pa\ta_\x83\x01\x86a\t0V[a\tn` \x83\x01\x85a\t?V[a\t{`@\x83\x01\x84a\t?V[\x94\x93PPPPV[_\x81\x90P\x91\x90PV[a\t\x95\x81a\t\x83V[\x81\x14a\t\x9FW_\x80\xFD[PV[_\x81Q\x90Pa\t\xB0\x81a\t\x8CV[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\t\xCCWa\t\xCBa\x05\xB6V[[_a\t\xD9\x85\x82\x86\x01a\t\xA2V[\x92PP` a\t\xEA\x85\x82\x86\x01a\t\xA2V[\x91PP\x92P\x92\x90PV[a\t\xFD\x81a\t\x83V[\x82RPPV[_`@\x82\x01\x90Pa\n\x16_\x83\x01\x85a\t?V[a\n#` \x83\x01\x84a\t\xF4V[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\na\x82a\t\x83V[\x91Pa\nl\x83a\t\x83V[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\n\x84Wa\n\x83a\n*V[[\x92\x91PPV[_\x81Q\x90Pa\n\x98\x81a\x07\x9EV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\n\xB3Wa\n\xB2a\x05\xB6V[[_a\n\xC0\x84\x82\x85\x01a\n\x8AV[\x91PP\x92\x91PPV[_`@\x82\x01\x90Pa\n\xDC_\x83\x01\x85a\t0V[a\n\xE9` \x83\x01\x84a\t?V[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x0B\x05Wa\x0B\x04a\x05\xB6V[[_a\x0B\x12\x84\x82\x85\x01a\t\xA2V[\x91PP\x92\x91PPV[_a\x0B%\x82a\x05\xBEV[\x91P\x7F\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x03a\x0BWWa\x0BVa\n*V[[\x81_\x03\x90P\x91\x90PV[_a\x0Bk\x82a\x06\xC3V[\x91Pa\x0Bv\x83a\x06\xC3V[\x92P\x82\x82\x03\x90Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\xA2Wa\x0B\xA1a\n*V[[\x92\x91PPV[_a\x0B\xC2a\x0B\xBDa\x0B\xB8\x84a\x06\xC3V[a\t\x06V[a\x06\xC3V[\x90P\x91\x90PV[_a\x0B\xD3\x82a\x0B\xA8V[\x90P\x91\x90PV[_a\x0B\xE4\x82a\x0B\xC9V[\x90P\x91\x90PV[a\x0B\xF4\x81a\x0B\xDAV[\x82RPPV[_a\x0C\x04\x82a\x0B\xC9V[\x90P\x91\x90PV[a\x0C\x14\x81a\x0B\xFAV[\x82RPPV[a\x0C#\x81a\x07\x93V[\x82RPPV[_`\xA0\x82\x01\x90Pa\x0C<_\x83\x01\x88a\t?V[a\x0CI` \x83\x01\x87a\x0B\xEBV[a\x0CV`@\x83\x01\x86a\x0C\x0BV[a\x0Cc``\x83\x01\x85a\t?V[a\x0Cp`\x80\x83\x01\x84a\x0C\x1AV[\x96\x95PPPPPPV[a\x0C\x83\x81a\x05\xBEV[\x82RPPV[a\x0C\x92\x81a\x06\xC3V[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_[\x83\x81\x10\x15a\x0C\xCFW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x0C\xB4V[_\x84\x84\x01RPPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x0C\xF4\x82a\x0C\x98V[a\x0C\xFE\x81\x85a\x0C\xA2V[\x93Pa\r\x0E\x81\x85` \x86\x01a\x0C\xB2V[a\r\x17\x81a\x0C\xDAV[\x84\x01\x91PP\x92\x91PPV[_`\xA0\x82\x01\x90Pa\r5_\x83\x01\x88a\t?V[a\rB` \x83\x01\x87a\x0C\x1AV[a\rO`@\x83\x01\x86a\x0CzV[a\r\\``\x83\x01\x85a\x0C\x89V[\x81\x81\x03`\x80\x83\x01Ra\rn\x81\x84a\x0C\xEAV[\x90P\x96\x95PPPPPPV[_\x81Q\x90Pa\r\x88\x81a\x05\xC7V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\r\xA4Wa\r\xA3a\x05\xB6V[[_a\r\xB1\x85\x82\x86\x01a\rzV[\x92PP` a\r\xC2\x85\x82\x86\x01a\rzV[\x91PP\x92P\x92\x90PV[_\x81`\x0F\x0B\x90P\x91\x90PV[a\r\xE1\x81a\r\xCCV[\x82RPPV[_a\x0E\x01a\r\xFCa\r\xF7\x84a\x08\xF1V[a\t\x06V[a\t\x83V[\x90P\x91\x90PV[a\x0E\x11\x81a\r\xE7V[\x82RPPV[_`\x80\x82\x01\x90Pa\x0E*_\x83\x01\x87a\r\xD8V[a\x0E7` \x83\x01\x86a\r\xD8V[a\x0ED`@\x83\x01\x85a\t\xF4V[a\x0EQ``\x83\x01\x84a\x0E\x08V[\x95\x94PPPPPV\xFE\xA2dipfsX\"\x12 `-\xDF\x16\x8E+:\xAA\xF58b+\xB1n\xF0\xF6\xA8\xF6\x16r\xB9G^\xAD\xD0\xA3\xAD.:2\xB5\x99dsolcC\0\x08\x15\x003";
    /// The bytecode of the contract.
    pub static WEETHCURVELIQUIDATOR_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xFAF\x1E3\x14a\08W\x80c\xFEpz.\x14a\0TW[_\x80\xFD[a\0R`\x04\x806\x03\x81\x01\x90a\0M\x91\x90a\x06RV[a\0pV[\0[a\0n`\x04\x806\x03\x81\x01\x90a\0i\x91\x90a\x07\xC8V[a\x03\x07V[\0[_\x80_\x80_\x86\x86\x81\x01\x90a\0\x84\x91\x90a\x08zV[\x94P\x94P\x94P\x94P\x94P_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c%\x84\x0E\xDA_\x880`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\0\xEC\x93\x92\x91\x90a\tNV[`@\x80Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x01\x07W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01+\x91\x90a\t\xB6V[\x91PP\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xEFi;\xED0\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01i\x92\x91\x90a\n\x03V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\x80W_\x80\xFD[PZ\xF1\x15\x80\x15a\x01\x92W=_\x80>=_\xFD[PPPP_\x89\x90P_a\x01\xA7\x85\x88\x84\x87a\x04\x92V[\x90P_\x82\x82a\x01\xB6\x91\x90a\nWV[\x90Ps\xC0*\xAA9\xB2#\xFE\x8D\n\x0E\\O'\xEA\xD9\x08<ul\xC2s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x85`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\x07\x92\x91\x90a\n\x03V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x02#W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02G\x91\x90a\n\x9EV[Ps\xC0*\xAA9\xB2#\xFE\x8D\n\x0E\\O'\xEA\xD9\x08<ul\xC2s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\xB7\x92\x91\x90a\n\x03V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x02\xD3W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xF7\x91\x90a\n\x9EV[PPPPPPPPPPPPPPV[_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA0\xD5\xF5\x99_\x88`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03c\x92\x91\x90a\n\xC9V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03~W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xA2\x91\x90a\n\xF0V[\x90Ps\x10\x980\xA1\xAA\xAD`[\xBF\x02\xA9\xDF\xA7\xB0\xB9.\xC2\xFB}\xAAs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x12\x8A\xCB\x080_\x84a\x03\xE0\x90a\x0B\x1BV[`\x01s\xFF\xFD\x89c\xEF\xD1\xFCjPd\x88I]\x95\x1DRc\x98\x8D&a\x04\x01\x91\x90a\x0BaV[\x8B\x8B\x8B\x8B\x8B`@Q` \x01a\x04\x1A\x95\x94\x93\x92\x91\x90a\x0C)V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04I\x95\x94\x93\x92\x91\x90a\r\"V[`@\x80Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x04dW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x88\x91\x90a\r\x8EV[PPPPPPPPV[_\x80\x85\x90P_\x80\x84a\x04\xA6W_`\x01a\x04\xAAV[`\x01_[\x91P\x91P\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x89\x88`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04\xE9\x92\x91\x90a\n\x03V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05\x05W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05)\x91\x90a\n\x9EV[P\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c=\xF0!$\x83\x83\x89_`@Q\x85c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05i\x94\x93\x92\x91\x90a\x0E\x17V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05\x85W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xA9\x91\x90a\n\xF0V[\x93PPPP\x94\x93PPPPV[_\x80\xFD[_\x80\xFD[_\x81\x90P\x91\x90PV[a\x05\xD0\x81a\x05\xBEV[\x81\x14a\x05\xDAW_\x80\xFD[PV[_\x815\x90Pa\x05\xEB\x81a\x05\xC7V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\x06\x12Wa\x06\x11a\x05\xF1V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06/Wa\x06.a\x05\xF5V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x06KWa\x06Ja\x05\xF9V[[\x92P\x92\x90PV[_\x80_\x80``\x85\x87\x03\x12\x15a\x06jWa\x06ia\x05\xB6V[[_a\x06w\x87\x82\x88\x01a\x05\xDDV[\x94PP` a\x06\x88\x87\x82\x88\x01a\x05\xDDV[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\xA9Wa\x06\xA8a\x05\xBAV[[a\x06\xB5\x87\x82\x88\x01a\x05\xFDV[\x92P\x92PP\x92\x95\x91\x94P\x92PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x06\xEC\x82a\x06\xC3V[\x90P\x91\x90PV[a\x06\xFC\x81a\x06\xE2V[\x81\x14a\x07\x06W_\x80\xFD[PV[_\x815\x90Pa\x07\x17\x81a\x06\xF3V[\x92\x91PPV[_a\x07'\x82a\x06\xE2V[\x90P\x91\x90PV[a\x077\x81a\x07\x1DV[\x81\x14a\x07AW_\x80\xFD[PV[_\x815\x90Pa\x07R\x81a\x07.V[\x92\x91PPV[_a\x07b\x82a\x06\xE2V[\x90P\x91\x90PV[a\x07r\x81a\x07XV[\x81\x14a\x07|W_\x80\xFD[PV[_\x815\x90Pa\x07\x8D\x81a\x07iV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x07\xA7\x81a\x07\x93V[\x81\x14a\x07\xB1W_\x80\xFD[PV[_\x815\x90Pa\x07\xC2\x81a\x07\x9EV[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x07\xE1Wa\x07\xE0a\x05\xB6V[[_a\x07\xEE\x88\x82\x89\x01a\x07\tV[\x95PP` a\x07\xFF\x88\x82\x89\x01a\x07DV[\x94PP`@a\x08\x10\x88\x82\x89\x01a\x07\x7FV[\x93PP``a\x08!\x88\x82\x89\x01a\x07\tV[\x92PP`\x80a\x082\x88\x82\x89\x01a\x07\xB4V[\x91PP\x92\x95P\x92\x95\x90\x93PV[_a\x08I\x82a\x06\xC3V[\x90P\x91\x90PV[a\x08Y\x81a\x08?V[\x81\x14a\x08cW_\x80\xFD[PV[_\x815\x90Pa\x08t\x81a\x08PV[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x08\x93Wa\x08\x92a\x05\xB6V[[_a\x08\xA0\x88\x82\x89\x01a\x08fV[\x95PP` a\x08\xB1\x88\x82\x89\x01a\x07DV[\x94PP`@a\x08\xC2\x88\x82\x89\x01a\x07\x7FV[\x93PP``a\x08\xD3\x88\x82\x89\x01a\x08fV[\x92PP`\x80a\x08\xE4\x88\x82\x89\x01a\x07\xB4V[\x91PP\x92\x95P\x92\x95\x90\x93PV[_\x81\x90P\x91\x90PV[_`\xFF\x82\x16\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[_a\t)a\t$a\t\x1F\x84a\x08\xF1V[a\t\x06V[a\x08\xFAV[\x90P\x91\x90PV[a\t9\x81a\t\x0FV[\x82RPPV[a\tH\x81a\x06\xE2V[\x82RPPV[_``\x82\x01\x90Pa\ta_\x83\x01\x86a\t0V[a\tn` \x83\x01\x85a\t?V[a\t{`@\x83\x01\x84a\t?V[\x94\x93PPPPV[_\x81\x90P\x91\x90PV[a\t\x95\x81a\t\x83V[\x81\x14a\t\x9FW_\x80\xFD[PV[_\x81Q\x90Pa\t\xB0\x81a\t\x8CV[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\t\xCCWa\t\xCBa\x05\xB6V[[_a\t\xD9\x85\x82\x86\x01a\t\xA2V[\x92PP` a\t\xEA\x85\x82\x86\x01a\t\xA2V[\x91PP\x92P\x92\x90PV[a\t\xFD\x81a\t\x83V[\x82RPPV[_`@\x82\x01\x90Pa\n\x16_\x83\x01\x85a\t?V[a\n#` \x83\x01\x84a\t\xF4V[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\na\x82a\t\x83V[\x91Pa\nl\x83a\t\x83V[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\n\x84Wa\n\x83a\n*V[[\x92\x91PPV[_\x81Q\x90Pa\n\x98\x81a\x07\x9EV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\n\xB3Wa\n\xB2a\x05\xB6V[[_a\n\xC0\x84\x82\x85\x01a\n\x8AV[\x91PP\x92\x91PPV[_`@\x82\x01\x90Pa\n\xDC_\x83\x01\x85a\t0V[a\n\xE9` \x83\x01\x84a\t?V[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x0B\x05Wa\x0B\x04a\x05\xB6V[[_a\x0B\x12\x84\x82\x85\x01a\t\xA2V[\x91PP\x92\x91PPV[_a\x0B%\x82a\x05\xBEV[\x91P\x7F\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x03a\x0BWWa\x0BVa\n*V[[\x81_\x03\x90P\x91\x90PV[_a\x0Bk\x82a\x06\xC3V[\x91Pa\x0Bv\x83a\x06\xC3V[\x92P\x82\x82\x03\x90Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\xA2Wa\x0B\xA1a\n*V[[\x92\x91PPV[_a\x0B\xC2a\x0B\xBDa\x0B\xB8\x84a\x06\xC3V[a\t\x06V[a\x06\xC3V[\x90P\x91\x90PV[_a\x0B\xD3\x82a\x0B\xA8V[\x90P\x91\x90PV[_a\x0B\xE4\x82a\x0B\xC9V[\x90P\x91\x90PV[a\x0B\xF4\x81a\x0B\xDAV[\x82RPPV[_a\x0C\x04\x82a\x0B\xC9V[\x90P\x91\x90PV[a\x0C\x14\x81a\x0B\xFAV[\x82RPPV[a\x0C#\x81a\x07\x93V[\x82RPPV[_`\xA0\x82\x01\x90Pa\x0C<_\x83\x01\x88a\t?V[a\x0CI` \x83\x01\x87a\x0B\xEBV[a\x0CV`@\x83\x01\x86a\x0C\x0BV[a\x0Cc``\x83\x01\x85a\t?V[a\x0Cp`\x80\x83\x01\x84a\x0C\x1AV[\x96\x95PPPPPPV[a\x0C\x83\x81a\x05\xBEV[\x82RPPV[a\x0C\x92\x81a\x06\xC3V[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_[\x83\x81\x10\x15a\x0C\xCFW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x0C\xB4V[_\x84\x84\x01RPPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x0C\xF4\x82a\x0C\x98V[a\x0C\xFE\x81\x85a\x0C\xA2V[\x93Pa\r\x0E\x81\x85` \x86\x01a\x0C\xB2V[a\r\x17\x81a\x0C\xDAV[\x84\x01\x91PP\x92\x91PPV[_`\xA0\x82\x01\x90Pa\r5_\x83\x01\x88a\t?V[a\rB` \x83\x01\x87a\x0C\x1AV[a\rO`@\x83\x01\x86a\x0CzV[a\r\\``\x83\x01\x85a\x0C\x89V[\x81\x81\x03`\x80\x83\x01Ra\rn\x81\x84a\x0C\xEAV[\x90P\x96\x95PPPPPPV[_\x81Q\x90Pa\r\x88\x81a\x05\xC7V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\r\xA4Wa\r\xA3a\x05\xB6V[[_a\r\xB1\x85\x82\x86\x01a\rzV[\x92PP` a\r\xC2\x85\x82\x86\x01a\rzV[\x91PP\x92P\x92\x90PV[_\x81`\x0F\x0B\x90P\x91\x90PV[a\r\xE1\x81a\r\xCCV[\x82RPPV[_a\x0E\x01a\r\xFCa\r\xF7\x84a\x08\xF1V[a\t\x06V[a\t\x83V[\x90P\x91\x90PV[a\x0E\x11\x81a\r\xE7V[\x82RPPV[_`\x80\x82\x01\x90Pa\x0E*_\x83\x01\x87a\r\xD8V[a\x0E7` \x83\x01\x86a\r\xD8V[a\x0ED`@\x83\x01\x85a\t\xF4V[a\x0EQ``\x83\x01\x84a\x0E\x08V[\x95\x94PPPPPV\xFE\xA2dipfsX\"\x12 `-\xDF\x16\x8E+:\xAA\xF58b+\xB1n\xF0\xF6\xA8\xF6\x16r\xB9G^\xAD\xD0\xA3\xAD.:2\xB5\x99dsolcC\0\x08\x15\x003";
    /// The deployed bytecode of the contract.
    pub static WEETHCURVELIQUIDATOR_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct WeEthCurveLiquidator<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for WeEthCurveLiquidator<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for WeEthCurveLiquidator<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for WeEthCurveLiquidator<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for WeEthCurveLiquidator<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(WeEthCurveLiquidator))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> WeEthCurveLiquidator<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    WEETHCURVELIQUIDATOR_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                WEETHCURVELIQUIDATOR_ABI.clone(),
                WEETHCURVELIQUIDATOR_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `liquidate` (0xfe707a2e) function
        pub fn liquidate(
            &self,
            user: ::ethers::core::types::Address,
            collateral_token: ::ethers::core::types::Address,
            gem_join: ::ethers::core::types::Address,
            pool: ::ethers::core::types::Address,
            weth_is_token_0: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [254, 112, 122, 46],
                    (user, collateral_token, gem_join, pool, weth_is_token_0),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `uniswapV3SwapCallback` (0xfa461e33) function
        pub fn uniswap_v3_swap_callback(
            &self,
            p0: ::ethers::core::types::I256,
            amount_1_delta: ::ethers::core::types::I256,
            data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([250, 70, 30, 51], (p0, amount_1_delta, data))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for WeEthCurveLiquidator<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `liquidate` function with signature `liquidate(address,address,address,address,bool)` and selector `0xfe707a2e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "liquidate",
        abi = "liquidate(address,address,address,address,bool)"
    )]
    pub struct LiquidateCall {
        pub user: ::ethers::core::types::Address,
        pub collateral_token: ::ethers::core::types::Address,
        pub gem_join: ::ethers::core::types::Address,
        pub pool: ::ethers::core::types::Address,
        pub weth_is_token_0: bool,
    }
    ///Container type for all input parameters for the `uniswapV3SwapCallback` function with signature `uniswapV3SwapCallback(int256,int256,bytes)` and selector `0xfa461e33`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "uniswapV3SwapCallback",
        abi = "uniswapV3SwapCallback(int256,int256,bytes)"
    )]
    pub struct UniswapV3SwapCallbackCall {
        pub p0: ::ethers::core::types::I256,
        pub amount_1_delta: ::ethers::core::types::I256,
        pub data: ::ethers::core::types::Bytes,
    }
    ///Container type for all of the contract's call
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        serde::Serialize,
        serde::Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub enum WeEthCurveLiquidatorCalls {
        Liquidate(LiquidateCall),
        UniswapV3SwapCallback(UniswapV3SwapCallbackCall),
    }
    impl ::ethers::core::abi::AbiDecode for WeEthCurveLiquidatorCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <LiquidateCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Liquidate(decoded));
            }
            if let Ok(decoded) = <UniswapV3SwapCallbackCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::UniswapV3SwapCallback(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for WeEthCurveLiquidatorCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Liquidate(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::UniswapV3SwapCallback(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for WeEthCurveLiquidatorCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Liquidate(element) => ::core::fmt::Display::fmt(element, f),
                Self::UniswapV3SwapCallback(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<LiquidateCall> for WeEthCurveLiquidatorCalls {
        fn from(value: LiquidateCall) -> Self {
            Self::Liquidate(value)
        }
    }
    impl ::core::convert::From<UniswapV3SwapCallbackCall> for WeEthCurveLiquidatorCalls {
        fn from(value: UniswapV3SwapCallbackCall) -> Self {
            Self::UniswapV3SwapCallback(value)
        }
    }
}
