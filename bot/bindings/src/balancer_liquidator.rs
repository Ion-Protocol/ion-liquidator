pub use balancer_liquidator::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod balancer_liquidator {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::Some(::ethers::core::abi::ethabi::Constructor {
                inputs: ::std::vec![
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("ionPool"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("contract IonPool"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("liquidation"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("contract Liquidation"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("weth"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("contract IWETH9"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("_treasury"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("address"),
                        ),
                    },
                ],
            }),
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("liquidate"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("liquidate"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("ilkIndex"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(8usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint8"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("user"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("collateralToken"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract IERC20"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("gemJoin"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract GemJoin"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("poolId"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::FixedBytes(
                                        32usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes32"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("wethIsToken0"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("receiveFlashLoan"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("receiveFlashLoan"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Array(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Address,
                                        ),
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract IERC20[]"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("amounts"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Array(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                        ),
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256[]"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Array(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                        ),
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256[]"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("userData"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("AddressEmptyCode"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("AddressEmptyCode"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("target"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("AddressInsufficientBalance"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned(
                                "AddressInsufficientBalance",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("account"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("FailedInnerCall"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("FailedInnerCall"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("SafeERC20FailedOperation"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned(
                                "SafeERC20FailedOperation",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("token"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                        },
                    ],
                ),
            ]),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static BALANCERLIQUIDATOR_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"a\x01\0`@R4\x80\x15b\0\0\x12W`\0\x80\xFD[P`@Qb\0\x1F>8\x03\x80b\0\x1F>\x839\x81\x81\x01`@R\x81\x01\x90b\0\08\x91\x90b\0\x02\xFBV[\x83\x83\x83\x83\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xA0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xC0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xE0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP`\xC0Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3`\xA0Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x01m\x92\x91\x90b\0\x03\x99V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15b\0\x01\x8DW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x01\xB3\x91\x90b\0\x04\x03V[PPPPPPPPPb\0\x045V[`\0\x80\xFD[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0b\0\x01\xF4\x82b\0\x01\xC7V[\x90P\x91\x90PV[`\0b\0\x02\x08\x82b\0\x01\xE7V[\x90P\x91\x90PV[b\0\x02\x1A\x81b\0\x01\xFBV[\x81\x14b\0\x02&W`\0\x80\xFD[PV[`\0\x81Q\x90Pb\0\x02:\x81b\0\x02\x0FV[\x92\x91PPV[`\0b\0\x02M\x82b\0\x01\xE7V[\x90P\x91\x90PV[b\0\x02_\x81b\0\x02@V[\x81\x14b\0\x02kW`\0\x80\xFD[PV[`\0\x81Q\x90Pb\0\x02\x7F\x81b\0\x02TV[\x92\x91PPV[`\0b\0\x02\x92\x82b\0\x01\xE7V[\x90P\x91\x90PV[b\0\x02\xA4\x81b\0\x02\x85V[\x81\x14b\0\x02\xB0W`\0\x80\xFD[PV[`\0\x81Q\x90Pb\0\x02\xC4\x81b\0\x02\x99V[\x92\x91PPV[b\0\x02\xD5\x81b\0\x01\xE7V[\x81\x14b\0\x02\xE1W`\0\x80\xFD[PV[`\0\x81Q\x90Pb\0\x02\xF5\x81b\0\x02\xCAV[\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15b\0\x03\x18Wb\0\x03\x17b\0\x01\xC2V[[`\0b\0\x03(\x87\x82\x88\x01b\0\x02)V[\x94PP` b\0\x03;\x87\x82\x88\x01b\0\x02nV[\x93PP`@b\0\x03N\x87\x82\x88\x01b\0\x02\xB3V[\x92PP``b\0\x03a\x87\x82\x88\x01b\0\x02\xE4V[\x91PP\x92\x95\x91\x94P\x92PV[b\0\x03x\x81b\0\x01\xE7V[\x82RPPV[`\0\x81\x90P\x91\x90PV[b\0\x03\x93\x81b\0\x03~V[\x82RPPV[`\0`@\x82\x01\x90Pb\0\x03\xB0`\0\x83\x01\x85b\0\x03mV[b\0\x03\xBF` \x83\x01\x84b\0\x03\x88V[\x93\x92PPPV[`\0\x81\x15\x15\x90P\x91\x90PV[b\0\x03\xDD\x81b\0\x03\xC6V[\x81\x14b\0\x03\xE9W`\0\x80\xFD[PV[`\0\x81Q\x90Pb\0\x03\xFD\x81b\0\x03\xD2V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15b\0\x04\x1CWb\0\x04\x1Bb\0\x01\xC2V[[`\0b\0\x04,\x84\x82\x85\x01b\0\x03\xECV[\x91PP\x92\x91PPV[`\x80Q`\xA0Q`\xC0Q`\xE0Qa\x1A\xB7b\0\x04\x87`\09`\0a\x05\xC2\x01R`\0\x81\x81`\xC3\x01R\x81\x81a\x05y\x01R\x81\x81a\x05\xE4\x01Ra\x06\x84\x01R`\0\x81\x81a\x01\x80\x01Ra\x03\xBB\x01R`\0PPa\x1A\xB7`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x006W`\x005`\xE0\x1C\x80cl\xB0D)\x14a\0;W\x80c\xF0O'\x07\x14a\0WW[`\0\x80\xFD[a\0U`\x04\x806\x03\x81\x01\x90a\0P\x91\x90a\x0CAV[a\0sV[\0[a\0q`\x04\x806\x03\x81\x01\x90a\0l\x91\x90a\x10\x13V[a\x02\xF2V[\0[`\0`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0\x90Wa\0\x8Fa\x0C\xE4V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\xBEW\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81`\0\x81Q\x81\x10a\0\xF6Wa\0\xF5a\x10\xEAV[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP`\0`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01MWa\x01La\x0C\xE4V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01{W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA0\xD5\xF5\x99\x89\x89`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01\xD9\x92\x91\x90a\x117V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xF6W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\x1A\x91\x90a\x11uV[\x81`\0\x81Q\x81\x10a\x02.Wa\x02-a\x10\xEAV[[` \x02` \x01\x01\x81\x81RPPs\xBA\x12\"\"\"\"\x8D\x8B\xA4E\x95\x8Au\xA0pMVk\xF2\xC8s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\\8D\x9E0\x84\x84\x8C\x8C\x8C\x8C\x8C\x8C`@Q` \x01a\x02\x88\x96\x95\x94\x93\x92\x91\x90a\x12@V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x85c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\xB6\x94\x93\x92\x91\x90a\x14\xCFV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x02\xD0W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x02\xE4W=`\0\x80>=`\0\xFD[PPPPPPPPPPPPV[`\0\x83`\0\x81Q\x81\x10a\x03\x08Wa\x03\x07a\x10\xEAV[[` \x02` \x01\x01Q\x90P`\0\x80`\0\x80`\0\x80\x87\x80` \x01\x90Q\x81\x01\x90a\x03/\x91\x90a\x15\xD0V[\x95P\x95P\x95P\x95P\x95P\x95P`\0\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03v\x91\x90a\x16]V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\x93W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xB7\x91\x90a\x11uV[\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c%\x84\x0E\xDA\x88\x880`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04\x16\x93\x92\x91\x90a\x16xV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x040W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x04DW=`\0\x80>=`\0\xFD[PPPP\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xEFi;\xED0\x8A`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04\x83\x92\x91\x90a\x16\xBEV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x04\x9DW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x04\xB1W=`\0\x80>=`\0\xFD[PPPP`\0\x81\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04\xF1\x91\x90a\x16]V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\x0EW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x052\x91\x90a\x11uV[a\x05<\x91\x90a\x17\x16V[\x90P`\0a\x05L\x85\x88\x84\x87a\x069V[\x90P`\0\x8A\x82a\x05\\\x91\x90a\x17\x16V[\x90Pa\x05\xBDs\xBA\x12\"\"\"\"\x8D\x8B\xA4E\x95\x8Au\xA0pMVk\xF2\xC8\x8C\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x07\xDF\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\x06(\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x07\xDF\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[PPPPPPPPPPPPPPPV[`\0\x80`@Q\x80`\xC0\x01`@R\x80\x87\x81R` \x01`\0`\x01\x81\x11\x15a\x06aWa\x06`a\x17JV[[\x81R` \x01\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85\x81R` \x01`@Q\x80` \x01`@R\x80`\0\x81RP\x81RP\x90P`\0`@Q\x80`\x80\x01`@R\x800s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0\x15\x15\x81R` \x010s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0\x15\x15\x81RP\x90Ps\xBA\x12\"\"\"\"\x8D\x8B\xA4E\x95\x8Au\xA0pMVk\xF2\xC8s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cR\xBB\xBE)\x83\x83`\0`\x01Ba\x07q\x91\x90a\x17yV[`@Q\x85c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x07\x90\x94\x93\x92\x91\x90a\x19\xB5V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x07\xAFW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\xD3\x91\x90a\x11uV[\x92PPP\x94\x93PPPPV[a\x08Y\x83\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB\x85\x85`@Q`$\x01a\x08\x12\x92\x91\x90a\x16\xBEV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91P`\xE0\x1B` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPPa\x08^V[PPPV[`\0a\x08\x89\x82\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xF5\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P`\0\x81Q\x14\x15\x80\x15a\x08\xAEWP\x80\x80` \x01\x90Q\x81\x01\x90a\x08\xAC\x91\x90a\x1A\x01V[\x15[\x15a\x08\xF0W\x82`@Q\x7FRt\xAF\xE7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08\xE7\x91\x90a\x16]V[`@Q\x80\x91\x03\x90\xFD[PPPV[``a\t\x03\x83\x83`\0a\t\x0BV[\x90P\x92\x91PPV[``\x81G\x10\x15a\tRW0`@Q\x7F\xCDx`Y\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\tI\x91\x90a\x16]V[`@Q\x80\x91\x03\x90\xFD[`\0\x80\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x86`@Qa\t{\x91\x90a\x1AjV[`\0`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\t\xB8W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\t\xBDV[``\x91P[P\x91P\x91Pa\t\xCD\x86\x83\x83a\t\xD8V[\x92PPP\x93\x92PPPV[``\x82a\t\xEDWa\t\xE8\x82a\ngV[a\n_V[`\0\x82Q\x14\x80\x15a\n\x15WP`\0\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14[\x15a\nWW\x83`@Q\x7F\x99\x96\xB3\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\nN\x91\x90a\x16]V[`@Q\x80\x91\x03\x90\xFD[\x81\x90Pa\n`V[[\x93\x92PPPV[`\0\x81Q\x11\x15a\nzW\x80Q\x80\x82` \x01\xFD[`@Q\x7F\x14%\xEAB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\0`@Q\x90P\x90V[`\0\x80\xFD[`\0\x80\xFD[`\0`\xFF\x82\x16\x90P\x91\x90PV[a\n\xD6\x81a\n\xC0V[\x81\x14a\n\xE1W`\0\x80\xFD[PV[`\0\x815\x90Pa\n\xF3\x81a\n\xCDV[\x92\x91PPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x0B$\x82a\n\xF9V[\x90P\x91\x90PV[a\x0B4\x81a\x0B\x19V[\x81\x14a\x0B?W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0BQ\x81a\x0B+V[\x92\x91PPV[`\0a\x0Bb\x82a\x0B\x19V[\x90P\x91\x90PV[a\x0Br\x81a\x0BWV[\x81\x14a\x0B}W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0B\x8F\x81a\x0BiV[\x92\x91PPV[`\0a\x0B\xA0\x82a\x0B\x19V[\x90P\x91\x90PV[a\x0B\xB0\x81a\x0B\x95V[\x81\x14a\x0B\xBBW`\0\x80\xFD[PV[`\0\x815\x90Pa\x0B\xCD\x81a\x0B\xA7V[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\x0B\xE6\x81a\x0B\xD3V[\x81\x14a\x0B\xF1W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0C\x03\x81a\x0B\xDDV[\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x0C\x1E\x81a\x0C\tV[\x81\x14a\x0C)W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0C;\x81a\x0C\x15V[\x92\x91PPV[`\0\x80`\0\x80`\0\x80`\xC0\x87\x89\x03\x12\x15a\x0C^Wa\x0C]a\n\xB6V[[`\0a\x0Cl\x89\x82\x8A\x01a\n\xE4V[\x96PP` a\x0C}\x89\x82\x8A\x01a\x0BBV[\x95PP`@a\x0C\x8E\x89\x82\x8A\x01a\x0B\x80V[\x94PP``a\x0C\x9F\x89\x82\x8A\x01a\x0B\xBEV[\x93PP`\x80a\x0C\xB0\x89\x82\x8A\x01a\x0B\xF4V[\x92PP`\xA0a\x0C\xC1\x89\x82\x8A\x01a\x0C,V[\x91PP\x92\x95P\x92\x95P\x92\x95V[`\0\x80\xFD[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[a\r\x1C\x82a\x0C\xD3V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\r;Wa\r:a\x0C\xE4V[[\x80`@RPPPV[`\0a\rNa\n\xACV[\x90Pa\rZ\x82\x82a\r\x13V[\x91\x90PV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\rzWa\rya\x0C\xE4V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0\x80\xFD[`\0a\r\x9B\x82a\x0B\x19V[\x90P\x91\x90PV[a\r\xAB\x81a\r\x90V[\x81\x14a\r\xB6W`\0\x80\xFD[PV[`\0\x815\x90Pa\r\xC8\x81a\r\xA2V[\x92\x91PPV[`\0a\r\xE1a\r\xDC\x84a\r_V[a\rDV[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x0E\x04Wa\x0E\x03a\r\x8BV[[\x83[\x81\x81\x10\x15a\x0E-W\x80a\x0E\x19\x88\x82a\r\xB9V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x0E\x06V[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x0ELWa\x0EKa\x0C\xCEV[[\x815a\x0E\\\x84\x82` \x86\x01a\r\xCEV[\x91PP\x92\x91PPV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0E\x80Wa\x0E\x7Fa\x0C\xE4V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0\x81\x90P\x91\x90PV[a\x0E\xA4\x81a\x0E\x91V[\x81\x14a\x0E\xAFW`\0\x80\xFD[PV[`\0\x815\x90Pa\x0E\xC1\x81a\x0E\x9BV[\x92\x91PPV[`\0a\x0E\xDAa\x0E\xD5\x84a\x0EeV[a\rDV[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x0E\xFDWa\x0E\xFCa\r\x8BV[[\x83[\x81\x81\x10\x15a\x0F&W\x80a\x0F\x12\x88\x82a\x0E\xB2V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x0E\xFFV[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x0FEWa\x0FDa\x0C\xCEV[[\x815a\x0FU\x84\x82` \x86\x01a\x0E\xC7V[\x91PP\x92\x91PPV[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0F~Wa\x0F}a\x0C\xE4V[[a\x0F\x87\x82a\x0C\xD3V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837`\0\x83\x83\x01RPPPV[`\0a\x0F\xB6a\x0F\xB1\x84a\x0FcV[a\rDV[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x0F\xD2Wa\x0F\xD1a\x0F^V[[a\x0F\xDD\x84\x82\x85a\x0F\x94V[P\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x0F\xFAWa\x0F\xF9a\x0C\xCEV[[\x815a\x10\n\x84\x82` \x86\x01a\x0F\xA3V[\x91PP\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x10-Wa\x10,a\n\xB6V[[`\0\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10KWa\x10Ja\n\xBBV[[a\x10W\x87\x82\x88\x01a\x0E7V[\x94PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10xWa\x10wa\n\xBBV[[a\x10\x84\x87\x82\x88\x01a\x0F0V[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xA5Wa\x10\xA4a\n\xBBV[[a\x10\xB1\x87\x82\x88\x01a\x0F0V[\x92PP``\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xD2Wa\x10\xD1a\n\xBBV[[a\x10\xDE\x87\x82\x88\x01a\x0F\xE5V[\x91PP\x92\x95\x91\x94P\x92PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[a\x11\"\x81a\n\xC0V[\x82RPPV[a\x111\x81a\x0B\x19V[\x82RPPV[`\0`@\x82\x01\x90Pa\x11L`\0\x83\x01\x85a\x11\x19V[a\x11Y` \x83\x01\x84a\x11(V[\x93\x92PPPV[`\0\x81Q\x90Pa\x11o\x81a\x0E\x9BV[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x11\x8BWa\x11\x8Aa\n\xB6V[[`\0a\x11\x99\x84\x82\x85\x01a\x11`V[\x91PP\x92\x91PPV[`\0\x81\x90P\x91\x90PV[`\0a\x11\xC7a\x11\xC2a\x11\xBD\x84a\n\xF9V[a\x11\xA2V[a\n\xF9V[\x90P\x91\x90PV[`\0a\x11\xD9\x82a\x11\xACV[\x90P\x91\x90PV[`\0a\x11\xEB\x82a\x11\xCEV[\x90P\x91\x90PV[a\x11\xFB\x81a\x11\xE0V[\x82RPPV[`\0a\x12\x0C\x82a\x11\xCEV[\x90P\x91\x90PV[a\x12\x1C\x81a\x12\x01V[\x82RPPV[a\x12+\x81a\x0B\xD3V[\x82RPPV[a\x12:\x81a\x0C\tV[\x82RPPV[`\0`\xC0\x82\x01\x90Pa\x12U`\0\x83\x01\x89a\x11\x19V[a\x12b` \x83\x01\x88a\x11(V[a\x12o`@\x83\x01\x87a\x11\xF2V[a\x12|``\x83\x01\x86a\x12\x13V[a\x12\x89`\x80\x83\x01\x85a\x12\"V[a\x12\x96`\xA0\x83\x01\x84a\x121V[\x97\x96PPPPPPPV[`\0a\x12\xAC\x82a\x11\xCEV[\x90P\x91\x90PV[a\x12\xBC\x81a\x12\xA1V[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[`\0a\x12\xF9\x82a\x11\xCEV[\x90P\x91\x90PV[a\x13\t\x81a\x12\xEEV[\x82RPPV[`\0a\x13\x1B\x83\x83a\x13\0V[` \x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x13?\x82a\x12\xC2V[a\x13I\x81\x85a\x12\xCDV[\x93Pa\x13T\x83a\x12\xDEV[\x80`\0[\x83\x81\x10\x15a\x13\x85W\x81Qa\x13l\x88\x82a\x13\x0FV[\x97Pa\x13w\x83a\x13'V[\x92PP`\x01\x81\x01\x90Pa\x13XV[P\x85\x93PPPP\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x13\xC7\x81a\x0E\x91V[\x82RPPV[`\0a\x13\xD9\x83\x83a\x13\xBEV[` \x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x13\xFD\x82a\x13\x92V[a\x14\x07\x81\x85a\x13\x9DV[\x93Pa\x14\x12\x83a\x13\xAEV[\x80`\0[\x83\x81\x10\x15a\x14CW\x81Qa\x14*\x88\x82a\x13\xCDV[\x97Pa\x145\x83a\x13\xE5V[\x92PP`\x01\x81\x01\x90Pa\x14\x16V[P\x85\x93PPPP\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x14\x8AW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x14oV[`\0\x84\x84\x01RPPPPV[`\0a\x14\xA1\x82a\x14PV[a\x14\xAB\x81\x85a\x14[V[\x93Pa\x14\xBB\x81\x85` \x86\x01a\x14lV[a\x14\xC4\x81a\x0C\xD3V[\x84\x01\x91PP\x92\x91PPV[`\0`\x80\x82\x01\x90Pa\x14\xE4`\0\x83\x01\x87a\x12\xB3V[\x81\x81\x03` \x83\x01Ra\x14\xF6\x81\x86a\x134V[\x90P\x81\x81\x03`@\x83\x01Ra\x15\n\x81\x85a\x13\xF2V[\x90P\x81\x81\x03``\x83\x01Ra\x15\x1E\x81\x84a\x14\x96V[\x90P\x95\x94PPPPPV[`\0\x81Q\x90Pa\x158\x81a\n\xCDV[\x92\x91PPV[`\0a\x15I\x82a\n\xF9V[\x90P\x91\x90PV[a\x15Y\x81a\x15>V[\x81\x14a\x15dW`\0\x80\xFD[PV[`\0\x81Q\x90Pa\x15v\x81a\x15PV[\x92\x91PPV[`\0\x81Q\x90Pa\x15\x8B\x81a\x0BiV[\x92\x91PPV[`\0\x81Q\x90Pa\x15\xA0\x81a\x0B\xA7V[\x92\x91PPV[`\0\x81Q\x90Pa\x15\xB5\x81a\x0B\xDDV[\x92\x91PPV[`\0\x81Q\x90Pa\x15\xCA\x81a\x0C\x15V[\x92\x91PPV[`\0\x80`\0\x80`\0\x80`\xC0\x87\x89\x03\x12\x15a\x15\xEDWa\x15\xECa\n\xB6V[[`\0a\x15\xFB\x89\x82\x8A\x01a\x15)V[\x96PP` a\x16\x0C\x89\x82\x8A\x01a\x15gV[\x95PP`@a\x16\x1D\x89\x82\x8A\x01a\x15|V[\x94PP``a\x16.\x89\x82\x8A\x01a\x15\x91V[\x93PP`\x80a\x16?\x89\x82\x8A\x01a\x15\xA6V[\x92PP`\xA0a\x16P\x89\x82\x8A\x01a\x15\xBBV[\x91PP\x92\x95P\x92\x95P\x92\x95V[`\0` \x82\x01\x90Pa\x16r`\0\x83\x01\x84a\x11(V[\x92\x91PPV[`\0``\x82\x01\x90Pa\x16\x8D`\0\x83\x01\x86a\x11\x19V[a\x16\x9A` \x83\x01\x85a\x11(V[a\x16\xA7`@\x83\x01\x84a\x11(V[\x94\x93PPPPV[a\x16\xB8\x81a\x0E\x91V[\x82RPPV[`\0`@\x82\x01\x90Pa\x16\xD3`\0\x83\x01\x85a\x11(V[a\x16\xE0` \x83\x01\x84a\x16\xAFV[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x17!\x82a\x0E\x91V[\x91Pa\x17,\x83a\x0E\x91V[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x17DWa\x17Ca\x16\xE7V[[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`!`\x04R`$`\0\xFD[`\0a\x17\x84\x82a\x0E\x91V[\x91Pa\x17\x8F\x83a\x0E\x91V[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x17\xA7Wa\x17\xA6a\x16\xE7V[[\x92\x91PPV[a\x17\xB6\x81a\x0B\xD3V[\x82RPPV[`\x02\x81\x10a\x17\xCDWa\x17\xCCa\x17JV[[PV[`\0\x81\x90Pa\x17\xDE\x82a\x17\xBCV[\x91\x90PV[`\0a\x17\xEE\x82a\x17\xD0V[\x90P\x91\x90PV[a\x17\xFE\x81a\x17\xE3V[\x82RPPV[`\0a\x18\x0F\x82a\x11\xCEV[\x90P\x91\x90PV[a\x18\x1F\x81a\x18\x04V[\x82RPPV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0a\x18A\x82a\x14PV[a\x18K\x81\x85a\x18%V[\x93Pa\x18[\x81\x85` \x86\x01a\x14lV[a\x18d\x81a\x0C\xD3V[\x84\x01\x91PP\x92\x91PPV[`\0`\xC0\x83\x01`\0\x83\x01Qa\x18\x87`\0\x86\x01\x82a\x17\xADV[P` \x83\x01Qa\x18\x9A` \x86\x01\x82a\x17\xF5V[P`@\x83\x01Qa\x18\xAD`@\x86\x01\x82a\x18\x16V[P``\x83\x01Qa\x18\xC0``\x86\x01\x82a\x18\x16V[P`\x80\x83\x01Qa\x18\xD3`\x80\x86\x01\x82a\x13\xBEV[P`\xA0\x83\x01Q\x84\x82\x03`\xA0\x86\x01Ra\x18\xEB\x82\x82a\x186V[\x91PP\x80\x91PP\x92\x91PPV[a\x19\x01\x81a\x0B\x19V[\x82RPPV[a\x19\x10\x81a\x0C\tV[\x82RPPV[a\x19\x1F\x81a\x15>V[\x82RPPV[`\x80\x82\x01`\0\x82\x01Qa\x19;`\0\x85\x01\x82a\x18\xF8V[P` \x82\x01Qa\x19N` \x85\x01\x82a\x19\x07V[P`@\x82\x01Qa\x19a`@\x85\x01\x82a\x19\x16V[P``\x82\x01Qa\x19t``\x85\x01\x82a\x19\x07V[PPPPV[`\0\x81\x90P\x91\x90PV[`\0a\x19\x9Fa\x19\x9Aa\x19\x95\x84a\x19zV[a\x11\xA2V[a\x0E\x91V[\x90P\x91\x90PV[a\x19\xAF\x81a\x19\x84V[\x82RPPV[`\0`\xE0\x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x19\xCF\x81\x87a\x18oV[\x90Pa\x19\xDE` \x83\x01\x86a\x19%V[a\x19\xEB`\xA0\x83\x01\x85a\x19\xA6V[a\x19\xF8`\xC0\x83\x01\x84a\x16\xAFV[\x95\x94PPPPPV[`\0` \x82\x84\x03\x12\x15a\x1A\x17Wa\x1A\x16a\n\xB6V[[`\0a\x1A%\x84\x82\x85\x01a\x15\xBBV[\x91PP\x92\x91PPV[`\0\x81\x90P\x92\x91PPV[`\0a\x1AD\x82a\x14PV[a\x1AN\x81\x85a\x1A.V[\x93Pa\x1A^\x81\x85` \x86\x01a\x14lV[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x1Av\x82\x84a\x1A9V[\x91P\x81\x90P\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xD5\xF1\xEFC\x12\xF1\xFC8M\x7F\x0B\x92\xFEQ\\\x1C\x05G\xB7\xB6\x1A\xF3\xAE\x95\xFD\xB8\xF9\x1C\xC6HW\xBBdsolcC\0\x08\x15\x003";
    /// The bytecode of the contract.
    pub static BALANCERLIQUIDATOR_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x006W`\x005`\xE0\x1C\x80cl\xB0D)\x14a\0;W\x80c\xF0O'\x07\x14a\0WW[`\0\x80\xFD[a\0U`\x04\x806\x03\x81\x01\x90a\0P\x91\x90a\x0CAV[a\0sV[\0[a\0q`\x04\x806\x03\x81\x01\x90a\0l\x91\x90a\x10\x13V[a\x02\xF2V[\0[`\0`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0\x90Wa\0\x8Fa\x0C\xE4V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\xBEW\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81`\0\x81Q\x81\x10a\0\xF6Wa\0\xF5a\x10\xEAV[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP`\0`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01MWa\x01La\x0C\xE4V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01{W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA0\xD5\xF5\x99\x89\x89`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01\xD9\x92\x91\x90a\x117V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xF6W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\x1A\x91\x90a\x11uV[\x81`\0\x81Q\x81\x10a\x02.Wa\x02-a\x10\xEAV[[` \x02` \x01\x01\x81\x81RPPs\xBA\x12\"\"\"\"\x8D\x8B\xA4E\x95\x8Au\xA0pMVk\xF2\xC8s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\\8D\x9E0\x84\x84\x8C\x8C\x8C\x8C\x8C\x8C`@Q` \x01a\x02\x88\x96\x95\x94\x93\x92\x91\x90a\x12@V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x85c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\xB6\x94\x93\x92\x91\x90a\x14\xCFV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x02\xD0W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x02\xE4W=`\0\x80>=`\0\xFD[PPPPPPPPPPPPV[`\0\x83`\0\x81Q\x81\x10a\x03\x08Wa\x03\x07a\x10\xEAV[[` \x02` \x01\x01Q\x90P`\0\x80`\0\x80`\0\x80\x87\x80` \x01\x90Q\x81\x01\x90a\x03/\x91\x90a\x15\xD0V[\x95P\x95P\x95P\x95P\x95P\x95P`\0\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03v\x91\x90a\x16]V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\x93W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xB7\x91\x90a\x11uV[\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c%\x84\x0E\xDA\x88\x880`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04\x16\x93\x92\x91\x90a\x16xV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x040W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x04DW=`\0\x80>=`\0\xFD[PPPP\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xEFi;\xED0\x8A`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04\x83\x92\x91\x90a\x16\xBEV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x04\x9DW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x04\xB1W=`\0\x80>=`\0\xFD[PPPP`\0\x81\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04\xF1\x91\x90a\x16]V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\x0EW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x052\x91\x90a\x11uV[a\x05<\x91\x90a\x17\x16V[\x90P`\0a\x05L\x85\x88\x84\x87a\x069V[\x90P`\0\x8A\x82a\x05\\\x91\x90a\x17\x16V[\x90Pa\x05\xBDs\xBA\x12\"\"\"\"\x8D\x8B\xA4E\x95\x8Au\xA0pMVk\xF2\xC8\x8C\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x07\xDF\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\x06(\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x07\xDF\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[PPPPPPPPPPPPPPPV[`\0\x80`@Q\x80`\xC0\x01`@R\x80\x87\x81R` \x01`\0`\x01\x81\x11\x15a\x06aWa\x06`a\x17JV[[\x81R` \x01\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85\x81R` \x01`@Q\x80` \x01`@R\x80`\0\x81RP\x81RP\x90P`\0`@Q\x80`\x80\x01`@R\x800s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0\x15\x15\x81R` \x010s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0\x15\x15\x81RP\x90Ps\xBA\x12\"\"\"\"\x8D\x8B\xA4E\x95\x8Au\xA0pMVk\xF2\xC8s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cR\xBB\xBE)\x83\x83`\0`\x01Ba\x07q\x91\x90a\x17yV[`@Q\x85c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x07\x90\x94\x93\x92\x91\x90a\x19\xB5V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x07\xAFW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\xD3\x91\x90a\x11uV[\x92PPP\x94\x93PPPPV[a\x08Y\x83\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB\x85\x85`@Q`$\x01a\x08\x12\x92\x91\x90a\x16\xBEV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91P`\xE0\x1B` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPPa\x08^V[PPPV[`\0a\x08\x89\x82\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xF5\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P`\0\x81Q\x14\x15\x80\x15a\x08\xAEWP\x80\x80` \x01\x90Q\x81\x01\x90a\x08\xAC\x91\x90a\x1A\x01V[\x15[\x15a\x08\xF0W\x82`@Q\x7FRt\xAF\xE7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08\xE7\x91\x90a\x16]V[`@Q\x80\x91\x03\x90\xFD[PPPV[``a\t\x03\x83\x83`\0a\t\x0BV[\x90P\x92\x91PPV[``\x81G\x10\x15a\tRW0`@Q\x7F\xCDx`Y\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\tI\x91\x90a\x16]V[`@Q\x80\x91\x03\x90\xFD[`\0\x80\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x86`@Qa\t{\x91\x90a\x1AjV[`\0`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\t\xB8W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\t\xBDV[``\x91P[P\x91P\x91Pa\t\xCD\x86\x83\x83a\t\xD8V[\x92PPP\x93\x92PPPV[``\x82a\t\xEDWa\t\xE8\x82a\ngV[a\n_V[`\0\x82Q\x14\x80\x15a\n\x15WP`\0\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14[\x15a\nWW\x83`@Q\x7F\x99\x96\xB3\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\nN\x91\x90a\x16]V[`@Q\x80\x91\x03\x90\xFD[\x81\x90Pa\n`V[[\x93\x92PPPV[`\0\x81Q\x11\x15a\nzW\x80Q\x80\x82` \x01\xFD[`@Q\x7F\x14%\xEAB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\0`@Q\x90P\x90V[`\0\x80\xFD[`\0\x80\xFD[`\0`\xFF\x82\x16\x90P\x91\x90PV[a\n\xD6\x81a\n\xC0V[\x81\x14a\n\xE1W`\0\x80\xFD[PV[`\0\x815\x90Pa\n\xF3\x81a\n\xCDV[\x92\x91PPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x0B$\x82a\n\xF9V[\x90P\x91\x90PV[a\x0B4\x81a\x0B\x19V[\x81\x14a\x0B?W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0BQ\x81a\x0B+V[\x92\x91PPV[`\0a\x0Bb\x82a\x0B\x19V[\x90P\x91\x90PV[a\x0Br\x81a\x0BWV[\x81\x14a\x0B}W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0B\x8F\x81a\x0BiV[\x92\x91PPV[`\0a\x0B\xA0\x82a\x0B\x19V[\x90P\x91\x90PV[a\x0B\xB0\x81a\x0B\x95V[\x81\x14a\x0B\xBBW`\0\x80\xFD[PV[`\0\x815\x90Pa\x0B\xCD\x81a\x0B\xA7V[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\x0B\xE6\x81a\x0B\xD3V[\x81\x14a\x0B\xF1W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0C\x03\x81a\x0B\xDDV[\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x0C\x1E\x81a\x0C\tV[\x81\x14a\x0C)W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0C;\x81a\x0C\x15V[\x92\x91PPV[`\0\x80`\0\x80`\0\x80`\xC0\x87\x89\x03\x12\x15a\x0C^Wa\x0C]a\n\xB6V[[`\0a\x0Cl\x89\x82\x8A\x01a\n\xE4V[\x96PP` a\x0C}\x89\x82\x8A\x01a\x0BBV[\x95PP`@a\x0C\x8E\x89\x82\x8A\x01a\x0B\x80V[\x94PP``a\x0C\x9F\x89\x82\x8A\x01a\x0B\xBEV[\x93PP`\x80a\x0C\xB0\x89\x82\x8A\x01a\x0B\xF4V[\x92PP`\xA0a\x0C\xC1\x89\x82\x8A\x01a\x0C,V[\x91PP\x92\x95P\x92\x95P\x92\x95V[`\0\x80\xFD[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[a\r\x1C\x82a\x0C\xD3V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\r;Wa\r:a\x0C\xE4V[[\x80`@RPPPV[`\0a\rNa\n\xACV[\x90Pa\rZ\x82\x82a\r\x13V[\x91\x90PV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\rzWa\rya\x0C\xE4V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0\x80\xFD[`\0a\r\x9B\x82a\x0B\x19V[\x90P\x91\x90PV[a\r\xAB\x81a\r\x90V[\x81\x14a\r\xB6W`\0\x80\xFD[PV[`\0\x815\x90Pa\r\xC8\x81a\r\xA2V[\x92\x91PPV[`\0a\r\xE1a\r\xDC\x84a\r_V[a\rDV[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x0E\x04Wa\x0E\x03a\r\x8BV[[\x83[\x81\x81\x10\x15a\x0E-W\x80a\x0E\x19\x88\x82a\r\xB9V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x0E\x06V[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x0ELWa\x0EKa\x0C\xCEV[[\x815a\x0E\\\x84\x82` \x86\x01a\r\xCEV[\x91PP\x92\x91PPV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0E\x80Wa\x0E\x7Fa\x0C\xE4V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0\x81\x90P\x91\x90PV[a\x0E\xA4\x81a\x0E\x91V[\x81\x14a\x0E\xAFW`\0\x80\xFD[PV[`\0\x815\x90Pa\x0E\xC1\x81a\x0E\x9BV[\x92\x91PPV[`\0a\x0E\xDAa\x0E\xD5\x84a\x0EeV[a\rDV[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x0E\xFDWa\x0E\xFCa\r\x8BV[[\x83[\x81\x81\x10\x15a\x0F&W\x80a\x0F\x12\x88\x82a\x0E\xB2V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x0E\xFFV[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x0FEWa\x0FDa\x0C\xCEV[[\x815a\x0FU\x84\x82` \x86\x01a\x0E\xC7V[\x91PP\x92\x91PPV[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0F~Wa\x0F}a\x0C\xE4V[[a\x0F\x87\x82a\x0C\xD3V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837`\0\x83\x83\x01RPPPV[`\0a\x0F\xB6a\x0F\xB1\x84a\x0FcV[a\rDV[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x0F\xD2Wa\x0F\xD1a\x0F^V[[a\x0F\xDD\x84\x82\x85a\x0F\x94V[P\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x0F\xFAWa\x0F\xF9a\x0C\xCEV[[\x815a\x10\n\x84\x82` \x86\x01a\x0F\xA3V[\x91PP\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x10-Wa\x10,a\n\xB6V[[`\0\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10KWa\x10Ja\n\xBBV[[a\x10W\x87\x82\x88\x01a\x0E7V[\x94PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10xWa\x10wa\n\xBBV[[a\x10\x84\x87\x82\x88\x01a\x0F0V[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xA5Wa\x10\xA4a\n\xBBV[[a\x10\xB1\x87\x82\x88\x01a\x0F0V[\x92PP``\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xD2Wa\x10\xD1a\n\xBBV[[a\x10\xDE\x87\x82\x88\x01a\x0F\xE5V[\x91PP\x92\x95\x91\x94P\x92PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[a\x11\"\x81a\n\xC0V[\x82RPPV[a\x111\x81a\x0B\x19V[\x82RPPV[`\0`@\x82\x01\x90Pa\x11L`\0\x83\x01\x85a\x11\x19V[a\x11Y` \x83\x01\x84a\x11(V[\x93\x92PPPV[`\0\x81Q\x90Pa\x11o\x81a\x0E\x9BV[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x11\x8BWa\x11\x8Aa\n\xB6V[[`\0a\x11\x99\x84\x82\x85\x01a\x11`V[\x91PP\x92\x91PPV[`\0\x81\x90P\x91\x90PV[`\0a\x11\xC7a\x11\xC2a\x11\xBD\x84a\n\xF9V[a\x11\xA2V[a\n\xF9V[\x90P\x91\x90PV[`\0a\x11\xD9\x82a\x11\xACV[\x90P\x91\x90PV[`\0a\x11\xEB\x82a\x11\xCEV[\x90P\x91\x90PV[a\x11\xFB\x81a\x11\xE0V[\x82RPPV[`\0a\x12\x0C\x82a\x11\xCEV[\x90P\x91\x90PV[a\x12\x1C\x81a\x12\x01V[\x82RPPV[a\x12+\x81a\x0B\xD3V[\x82RPPV[a\x12:\x81a\x0C\tV[\x82RPPV[`\0`\xC0\x82\x01\x90Pa\x12U`\0\x83\x01\x89a\x11\x19V[a\x12b` \x83\x01\x88a\x11(V[a\x12o`@\x83\x01\x87a\x11\xF2V[a\x12|``\x83\x01\x86a\x12\x13V[a\x12\x89`\x80\x83\x01\x85a\x12\"V[a\x12\x96`\xA0\x83\x01\x84a\x121V[\x97\x96PPPPPPPV[`\0a\x12\xAC\x82a\x11\xCEV[\x90P\x91\x90PV[a\x12\xBC\x81a\x12\xA1V[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[`\0a\x12\xF9\x82a\x11\xCEV[\x90P\x91\x90PV[a\x13\t\x81a\x12\xEEV[\x82RPPV[`\0a\x13\x1B\x83\x83a\x13\0V[` \x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x13?\x82a\x12\xC2V[a\x13I\x81\x85a\x12\xCDV[\x93Pa\x13T\x83a\x12\xDEV[\x80`\0[\x83\x81\x10\x15a\x13\x85W\x81Qa\x13l\x88\x82a\x13\x0FV[\x97Pa\x13w\x83a\x13'V[\x92PP`\x01\x81\x01\x90Pa\x13XV[P\x85\x93PPPP\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x13\xC7\x81a\x0E\x91V[\x82RPPV[`\0a\x13\xD9\x83\x83a\x13\xBEV[` \x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x13\xFD\x82a\x13\x92V[a\x14\x07\x81\x85a\x13\x9DV[\x93Pa\x14\x12\x83a\x13\xAEV[\x80`\0[\x83\x81\x10\x15a\x14CW\x81Qa\x14*\x88\x82a\x13\xCDV[\x97Pa\x145\x83a\x13\xE5V[\x92PP`\x01\x81\x01\x90Pa\x14\x16V[P\x85\x93PPPP\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x14\x8AW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x14oV[`\0\x84\x84\x01RPPPPV[`\0a\x14\xA1\x82a\x14PV[a\x14\xAB\x81\x85a\x14[V[\x93Pa\x14\xBB\x81\x85` \x86\x01a\x14lV[a\x14\xC4\x81a\x0C\xD3V[\x84\x01\x91PP\x92\x91PPV[`\0`\x80\x82\x01\x90Pa\x14\xE4`\0\x83\x01\x87a\x12\xB3V[\x81\x81\x03` \x83\x01Ra\x14\xF6\x81\x86a\x134V[\x90P\x81\x81\x03`@\x83\x01Ra\x15\n\x81\x85a\x13\xF2V[\x90P\x81\x81\x03``\x83\x01Ra\x15\x1E\x81\x84a\x14\x96V[\x90P\x95\x94PPPPPV[`\0\x81Q\x90Pa\x158\x81a\n\xCDV[\x92\x91PPV[`\0a\x15I\x82a\n\xF9V[\x90P\x91\x90PV[a\x15Y\x81a\x15>V[\x81\x14a\x15dW`\0\x80\xFD[PV[`\0\x81Q\x90Pa\x15v\x81a\x15PV[\x92\x91PPV[`\0\x81Q\x90Pa\x15\x8B\x81a\x0BiV[\x92\x91PPV[`\0\x81Q\x90Pa\x15\xA0\x81a\x0B\xA7V[\x92\x91PPV[`\0\x81Q\x90Pa\x15\xB5\x81a\x0B\xDDV[\x92\x91PPV[`\0\x81Q\x90Pa\x15\xCA\x81a\x0C\x15V[\x92\x91PPV[`\0\x80`\0\x80`\0\x80`\xC0\x87\x89\x03\x12\x15a\x15\xEDWa\x15\xECa\n\xB6V[[`\0a\x15\xFB\x89\x82\x8A\x01a\x15)V[\x96PP` a\x16\x0C\x89\x82\x8A\x01a\x15gV[\x95PP`@a\x16\x1D\x89\x82\x8A\x01a\x15|V[\x94PP``a\x16.\x89\x82\x8A\x01a\x15\x91V[\x93PP`\x80a\x16?\x89\x82\x8A\x01a\x15\xA6V[\x92PP`\xA0a\x16P\x89\x82\x8A\x01a\x15\xBBV[\x91PP\x92\x95P\x92\x95P\x92\x95V[`\0` \x82\x01\x90Pa\x16r`\0\x83\x01\x84a\x11(V[\x92\x91PPV[`\0``\x82\x01\x90Pa\x16\x8D`\0\x83\x01\x86a\x11\x19V[a\x16\x9A` \x83\x01\x85a\x11(V[a\x16\xA7`@\x83\x01\x84a\x11(V[\x94\x93PPPPV[a\x16\xB8\x81a\x0E\x91V[\x82RPPV[`\0`@\x82\x01\x90Pa\x16\xD3`\0\x83\x01\x85a\x11(V[a\x16\xE0` \x83\x01\x84a\x16\xAFV[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x17!\x82a\x0E\x91V[\x91Pa\x17,\x83a\x0E\x91V[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x17DWa\x17Ca\x16\xE7V[[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`!`\x04R`$`\0\xFD[`\0a\x17\x84\x82a\x0E\x91V[\x91Pa\x17\x8F\x83a\x0E\x91V[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x17\xA7Wa\x17\xA6a\x16\xE7V[[\x92\x91PPV[a\x17\xB6\x81a\x0B\xD3V[\x82RPPV[`\x02\x81\x10a\x17\xCDWa\x17\xCCa\x17JV[[PV[`\0\x81\x90Pa\x17\xDE\x82a\x17\xBCV[\x91\x90PV[`\0a\x17\xEE\x82a\x17\xD0V[\x90P\x91\x90PV[a\x17\xFE\x81a\x17\xE3V[\x82RPPV[`\0a\x18\x0F\x82a\x11\xCEV[\x90P\x91\x90PV[a\x18\x1F\x81a\x18\x04V[\x82RPPV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0a\x18A\x82a\x14PV[a\x18K\x81\x85a\x18%V[\x93Pa\x18[\x81\x85` \x86\x01a\x14lV[a\x18d\x81a\x0C\xD3V[\x84\x01\x91PP\x92\x91PPV[`\0`\xC0\x83\x01`\0\x83\x01Qa\x18\x87`\0\x86\x01\x82a\x17\xADV[P` \x83\x01Qa\x18\x9A` \x86\x01\x82a\x17\xF5V[P`@\x83\x01Qa\x18\xAD`@\x86\x01\x82a\x18\x16V[P``\x83\x01Qa\x18\xC0``\x86\x01\x82a\x18\x16V[P`\x80\x83\x01Qa\x18\xD3`\x80\x86\x01\x82a\x13\xBEV[P`\xA0\x83\x01Q\x84\x82\x03`\xA0\x86\x01Ra\x18\xEB\x82\x82a\x186V[\x91PP\x80\x91PP\x92\x91PPV[a\x19\x01\x81a\x0B\x19V[\x82RPPV[a\x19\x10\x81a\x0C\tV[\x82RPPV[a\x19\x1F\x81a\x15>V[\x82RPPV[`\x80\x82\x01`\0\x82\x01Qa\x19;`\0\x85\x01\x82a\x18\xF8V[P` \x82\x01Qa\x19N` \x85\x01\x82a\x19\x07V[P`@\x82\x01Qa\x19a`@\x85\x01\x82a\x19\x16V[P``\x82\x01Qa\x19t``\x85\x01\x82a\x19\x07V[PPPPV[`\0\x81\x90P\x91\x90PV[`\0a\x19\x9Fa\x19\x9Aa\x19\x95\x84a\x19zV[a\x11\xA2V[a\x0E\x91V[\x90P\x91\x90PV[a\x19\xAF\x81a\x19\x84V[\x82RPPV[`\0`\xE0\x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x19\xCF\x81\x87a\x18oV[\x90Pa\x19\xDE` \x83\x01\x86a\x19%V[a\x19\xEB`\xA0\x83\x01\x85a\x19\xA6V[a\x19\xF8`\xC0\x83\x01\x84a\x16\xAFV[\x95\x94PPPPPV[`\0` \x82\x84\x03\x12\x15a\x1A\x17Wa\x1A\x16a\n\xB6V[[`\0a\x1A%\x84\x82\x85\x01a\x15\xBBV[\x91PP\x92\x91PPV[`\0\x81\x90P\x92\x91PPV[`\0a\x1AD\x82a\x14PV[a\x1AN\x81\x85a\x1A.V[\x93Pa\x1A^\x81\x85` \x86\x01a\x14lV[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x1Av\x82\x84a\x1A9V[\x91P\x81\x90P\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xD5\xF1\xEFC\x12\xF1\xFC8M\x7F\x0B\x92\xFEQ\\\x1C\x05G\xB7\xB6\x1A\xF3\xAE\x95\xFD\xB8\xF9\x1C\xC6HW\xBBdsolcC\0\x08\x15\x003";
    /// The deployed bytecode of the contract.
    pub static BALANCERLIQUIDATOR_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct BalancerLiquidator<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for BalancerLiquidator<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for BalancerLiquidator<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for BalancerLiquidator<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for BalancerLiquidator<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(BalancerLiquidator))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> BalancerLiquidator<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    BALANCERLIQUIDATOR_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                BALANCERLIQUIDATOR_ABI.clone(),
                BALANCERLIQUIDATOR_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `liquidate` (0x6cb04429) function
        pub fn liquidate(
            &self,
            ilk_index: u8,
            user: ::ethers::core::types::Address,
            collateral_token: ::ethers::core::types::Address,
            gem_join: ::ethers::core::types::Address,
            pool_id: [u8; 32],
            weth_is_token_0: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [108, 176, 68, 41],
                    (
                        ilk_index,
                        user,
                        collateral_token,
                        gem_join,
                        pool_id,
                        weth_is_token_0,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `receiveFlashLoan` (0xf04f2707) function
        pub fn receive_flash_loan(
            &self,
            p0: ::std::vec::Vec<::ethers::core::types::Address>,
            amounts: ::std::vec::Vec<::ethers::core::types::U256>,
            p2: ::std::vec::Vec<::ethers::core::types::U256>,
            user_data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([240, 79, 39, 7], (p0, amounts, p2, user_data))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for BalancerLiquidator<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `AddressEmptyCode` with signature `AddressEmptyCode(address)` and selector `0x9996b315`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "AddressEmptyCode", abi = "AddressEmptyCode(address)")]
    pub struct AddressEmptyCode {
        pub target: ::ethers::core::types::Address,
    }
    ///Custom Error type `AddressInsufficientBalance` with signature `AddressInsufficientBalance(address)` and selector `0xcd786059`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "AddressInsufficientBalance",
        abi = "AddressInsufficientBalance(address)"
    )]
    pub struct AddressInsufficientBalance {
        pub account: ::ethers::core::types::Address,
    }
    ///Custom Error type `FailedInnerCall` with signature `FailedInnerCall()` and selector `0x1425ea42`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "FailedInnerCall", abi = "FailedInnerCall()")]
    pub struct FailedInnerCall;
    ///Custom Error type `SafeERC20FailedOperation` with signature `SafeERC20FailedOperation(address)` and selector `0x5274afe7`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "SafeERC20FailedOperation",
        abi = "SafeERC20FailedOperation(address)"
    )]
    pub struct SafeERC20FailedOperation {
        pub token: ::ethers::core::types::Address,
    }
    ///Container type for all of the contract's custom errors
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        serde::Serialize,
        serde::Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub enum BalancerLiquidatorErrors {
        AddressEmptyCode(AddressEmptyCode),
        AddressInsufficientBalance(AddressInsufficientBalance),
        FailedInnerCall(FailedInnerCall),
        SafeERC20FailedOperation(SafeERC20FailedOperation),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for BalancerLiquidatorErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded) = <AddressEmptyCode as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::AddressEmptyCode(decoded));
            }
            if let Ok(decoded) = <AddressInsufficientBalance as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::AddressInsufficientBalance(decoded));
            }
            if let Ok(decoded) = <FailedInnerCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::FailedInnerCall(decoded));
            }
            if let Ok(decoded) = <SafeERC20FailedOperation as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::SafeERC20FailedOperation(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for BalancerLiquidatorErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::AddressEmptyCode(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::AddressInsufficientBalance(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::FailedInnerCall(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SafeERC20FailedOperation(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for BalancerLiquidatorErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <AddressEmptyCode as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <AddressInsufficientBalance as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <FailedInnerCall as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <SafeERC20FailedOperation as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for BalancerLiquidatorErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::AddressEmptyCode(element) => ::core::fmt::Display::fmt(element, f),
                Self::AddressInsufficientBalance(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::FailedInnerCall(element) => ::core::fmt::Display::fmt(element, f),
                Self::SafeERC20FailedOperation(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for BalancerLiquidatorErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<AddressEmptyCode> for BalancerLiquidatorErrors {
        fn from(value: AddressEmptyCode) -> Self {
            Self::AddressEmptyCode(value)
        }
    }
    impl ::core::convert::From<AddressInsufficientBalance> for BalancerLiquidatorErrors {
        fn from(value: AddressInsufficientBalance) -> Self {
            Self::AddressInsufficientBalance(value)
        }
    }
    impl ::core::convert::From<FailedInnerCall> for BalancerLiquidatorErrors {
        fn from(value: FailedInnerCall) -> Self {
            Self::FailedInnerCall(value)
        }
    }
    impl ::core::convert::From<SafeERC20FailedOperation> for BalancerLiquidatorErrors {
        fn from(value: SafeERC20FailedOperation) -> Self {
            Self::SafeERC20FailedOperation(value)
        }
    }
    ///Container type for all input parameters for the `liquidate` function with signature `liquidate(uint8,address,address,address,bytes32,bool)` and selector `0x6cb04429`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "liquidate",
        abi = "liquidate(uint8,address,address,address,bytes32,bool)"
    )]
    pub struct LiquidateCall {
        pub ilk_index: u8,
        pub user: ::ethers::core::types::Address,
        pub collateral_token: ::ethers::core::types::Address,
        pub gem_join: ::ethers::core::types::Address,
        pub pool_id: [u8; 32],
        pub weth_is_token_0: bool,
    }
    ///Container type for all input parameters for the `receiveFlashLoan` function with signature `receiveFlashLoan(address[],uint256[],uint256[],bytes)` and selector `0xf04f2707`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "receiveFlashLoan",
        abi = "receiveFlashLoan(address[],uint256[],uint256[],bytes)"
    )]
    pub struct ReceiveFlashLoanCall {
        pub p0: ::std::vec::Vec<::ethers::core::types::Address>,
        pub amounts: ::std::vec::Vec<::ethers::core::types::U256>,
        pub p2: ::std::vec::Vec<::ethers::core::types::U256>,
        pub user_data: ::ethers::core::types::Bytes,
    }
    ///Container type for all of the contract's call
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        serde::Serialize,
        serde::Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub enum BalancerLiquidatorCalls {
        Liquidate(LiquidateCall),
        ReceiveFlashLoan(ReceiveFlashLoanCall),
    }
    impl ::ethers::core::abi::AbiDecode for BalancerLiquidatorCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <LiquidateCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Liquidate(decoded));
            }
            if let Ok(decoded) = <ReceiveFlashLoanCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::ReceiveFlashLoan(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for BalancerLiquidatorCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Liquidate(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ReceiveFlashLoan(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for BalancerLiquidatorCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Liquidate(element) => ::core::fmt::Display::fmt(element, f),
                Self::ReceiveFlashLoan(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<LiquidateCall> for BalancerLiquidatorCalls {
        fn from(value: LiquidateCall) -> Self {
            Self::Liquidate(value)
        }
    }
    impl ::core::convert::From<ReceiveFlashLoanCall> for BalancerLiquidatorCalls {
        fn from(value: ReceiveFlashLoanCall) -> Self {
            Self::ReceiveFlashLoan(value)
        }
    }
}
