pub use we_eth_uniswap_liquidator::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod we_eth_uniswap_liquidator {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::Some(::ethers::core::abi::ethabi::Constructor {
                inputs: ::std::vec![
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("_liquidation"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("contract Liquidation"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("_treasury"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("address"),
                        ),
                    },
                ],
            }),
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("liquidate"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("liquidate"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("user"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("collateralToken"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract IERC20"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("gemJoin"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract GemJoin"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("pool"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("wethIsToken0"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("uniswapV3SwapCallback"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned(
                                "uniswapV3SwapCallback",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("amount0Delta"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Int(256usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("int256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("amount1Delta"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Int(256usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("int256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("data"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static WEETHUNISWAPLIQUIDATOR_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\xE0`@R4\x80\x15b\0\0\x10W_\x80\xFD[P`@Qb\0\x13\xB38\x03\x80b\0\x13\xB3\x839\x81\x81\x01`@R\x81\x01\x90b\0\x006\x91\x90b\0\x02\xABV[\x81\x81\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xA0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cu5\xD2F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\0\xB6W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\0\xDC\x91\x90b\0\x032V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xC0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPs\x7F9\xC5\x81\xF5\x95\xB5<\\\xB1\x9B\xD0\xB3\xF8\xDAl\x93^,\xA0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3`\xA0Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01b\0\x01\xB6\x92\x91\x90b\0\x03\x8DV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15b\0\x01\xD3W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x01\xF9\x91\x90b\0\x03\xF2V[PPPPPb\0\x04\"V[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_b\0\x023\x82b\0\x02\x08V[\x90P\x91\x90PV[_b\0\x02F\x82b\0\x02'V[\x90P\x91\x90PV[b\0\x02X\x81b\0\x02:V[\x81\x14b\0\x02cW_\x80\xFD[PV[_\x81Q\x90Pb\0\x02v\x81b\0\x02MV[\x92\x91PPV[b\0\x02\x87\x81b\0\x02'V[\x81\x14b\0\x02\x92W_\x80\xFD[PV[_\x81Q\x90Pb\0\x02\xA5\x81b\0\x02|V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15b\0\x02\xC4Wb\0\x02\xC3b\0\x02\x04V[[_b\0\x02\xD3\x85\x82\x86\x01b\0\x02fV[\x92PP` b\0\x02\xE6\x85\x82\x86\x01b\0\x02\x95V[\x91PP\x92P\x92\x90PV[_b\0\x02\xFC\x82b\0\x02'V[\x90P\x91\x90PV[b\0\x03\x0E\x81b\0\x02\xF0V[\x81\x14b\0\x03\x19W_\x80\xFD[PV[_\x81Q\x90Pb\0\x03,\x81b\0\x03\x03V[\x92\x91PPV[_` \x82\x84\x03\x12\x15b\0\x03JWb\0\x03Ib\0\x02\x04V[[_b\0\x03Y\x84\x82\x85\x01b\0\x03\x1CV[\x91PP\x92\x91PPV[b\0\x03m\x81b\0\x02'V[\x82RPPV[_\x81\x90P\x91\x90PV[b\0\x03\x87\x81b\0\x03sV[\x82RPPV[_`@\x82\x01\x90Pb\0\x03\xA2_\x83\x01\x85b\0\x03bV[b\0\x03\xB1` \x83\x01\x84b\0\x03|V[\x93\x92PPPV[_\x81\x15\x15\x90P\x91\x90PV[b\0\x03\xCE\x81b\0\x03\xB8V[\x81\x14b\0\x03\xD9W_\x80\xFD[PV[_\x81Q\x90Pb\0\x03\xEC\x81b\0\x03\xC3V[\x92\x91PPV[_` \x82\x84\x03\x12\x15b\0\x04\nWb\0\x04\tb\0\x02\x04V[[_b\0\x04\x19\x84\x82\x85\x01b\0\x03\xDCV[\x91PP\x92\x91PPV[`\x80Q`\xA0Q`\xC0Qa\x0Fbb\0\x04Q_9_a\x04\xCC\x01R_\x81\x81a\x01:\x01Ra\x02\xE3\x01R_PPa\x0Fb_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xFAF\x1E3\x14a\08W\x80c\xFEpz.\x14a\0TW[_\x80\xFD[a\0R`\x04\x806\x03\x81\x01\x90a\0M\x91\x90a\x07\x06V[a\0pV[\0[a\0n`\x04\x806\x03\x81\x01\x90a\0i\x91\x90a\x08|V[a\x017V[\0[`@\x82\x82\x90P\x14a\0\x8CWa\0\x87\x84\x84\x84\x84a\x02\xC2V[a\x011V[_\x80\x83\x83\x81\x01\x90a\0\x9D\x91\x90a\x08\xF3V[\x91P\x91P_\x81a\0\xADW\x86a\0\xAFV[\x85[\x90P\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\0\xEC\x92\x91\x90a\tXV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x01\x08W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01,\x91\x90a\t\x93V[PPPP[PPPPV[_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA0\xD5\xF5\x99_\x88`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01\x93\x92\x91\x90a\n\x0CV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xAEW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xD2\x91\x90a\n]V[\x90Ps\x10\x980\xA1\xAA\xAD`[\xBF\x02\xA9\xDF\xA7\xB0\xB9.\xC2\xFB}\xAAs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x12\x8A\xCB\x080_\x84a\x02\x10\x90a\n\xB5V[`\x01s\xFF\xFD\x89c\xEF\xD1\xFCjPd\x88I]\x95\x1DRc\x98\x8D&a\x021\x91\x90a\n\xFBV[\x8B\x8B\x8B\x8B\x8B`@Q` \x01a\x02J\x95\x94\x93\x92\x91\x90a\x0B\xC3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02y\x95\x94\x93\x92\x91\x90a\x0C\xBCV[`@\x80Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x02\x94W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xB8\x91\x90a\r(V[PPPPPPPPV[_\x80_\x80_\x86\x86\x81\x01\x90a\x02\xD6\x91\x90a\r\xA1V[\x94P\x94P\x94P\x94P\x94P_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c%\x84\x0E\xDA_\x880`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03>\x93\x92\x91\x90a\x0E\x18V[`@\x80Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x03YW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03}\x91\x90a\x0EMV[\x91PP\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xEFi;\xED0\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\xBB\x92\x91\x90a\tXV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\xD2W_\x80\xFD[PZ\xF1\x15\x80\x15a\x03\xE4W=_\x80>=_\xFD[PPPP_\x89\x90P_a\x03\xF9\x85\x88\x84\x87a\x05YV[\x90P_\x82\x82a\x04\x08\x91\x90a\x0E\x8BV[\x90Ps\xC0*\xAA9\xB2#\xFE\x8D\n\x0E\\O'\xEA\xD9\x08<ul\xC2s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x85`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04Y\x92\x91\x90a\tXV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x04uW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x99\x91\x90a\t\x93V[Ps\xC0*\xAA9\xB2#\xFE\x8D\n\x0E\\O'\xEA\xD9\x08<ul\xC2s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05\t\x92\x91\x90a\tXV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05%W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05I\x91\x90a\t\x93V[PPPPPPPPPPPPPPV[_\x80_\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x12\x8A\xCB\x080\x86\x15\x88\x88a\x05\x98W`\x01d\x01\0\x02v\xA3a\x05\x93\x91\x90a\x0E\xBEV[a\x05\xBAV[`\x01s\xFF\xFD\x89c\xEF\xD1\xFCjPd\x88I]\x95\x1DRc\x98\x8D&a\x05\xB9\x91\x90a\n\xFBV[[\x8B\x8A`@Q` \x01a\x05\xCD\x92\x91\x90a\x0F\x05V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05\xFC\x95\x94\x93\x92\x91\x90a\x0C\xBCV[`@\x80Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x06\x17W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06;\x91\x90a\r(V[\x91P\x91P\x83a\x06SW\x80a\x06N\x90a\n\xB5V[a\x06^V[\x81a\x06]\x90a\n\xB5V[[\x92PPP\x94\x93PPPPV[_\x80\xFD[_\x80\xFD[_\x81\x90P\x91\x90PV[a\x06\x84\x81a\x06rV[\x81\x14a\x06\x8EW_\x80\xFD[PV[_\x815\x90Pa\x06\x9F\x81a\x06{V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\x06\xC6Wa\x06\xC5a\x06\xA5V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\xE3Wa\x06\xE2a\x06\xA9V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x06\xFFWa\x06\xFEa\x06\xADV[[\x92P\x92\x90PV[_\x80_\x80``\x85\x87\x03\x12\x15a\x07\x1EWa\x07\x1Da\x06jV[[_a\x07+\x87\x82\x88\x01a\x06\x91V[\x94PP` a\x07<\x87\x82\x88\x01a\x06\x91V[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07]Wa\x07\\a\x06nV[[a\x07i\x87\x82\x88\x01a\x06\xB1V[\x92P\x92PP\x92\x95\x91\x94P\x92PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x07\xA0\x82a\x07wV[\x90P\x91\x90PV[a\x07\xB0\x81a\x07\x96V[\x81\x14a\x07\xBAW_\x80\xFD[PV[_\x815\x90Pa\x07\xCB\x81a\x07\xA7V[\x92\x91PPV[_a\x07\xDB\x82a\x07\x96V[\x90P\x91\x90PV[a\x07\xEB\x81a\x07\xD1V[\x81\x14a\x07\xF5W_\x80\xFD[PV[_\x815\x90Pa\x08\x06\x81a\x07\xE2V[\x92\x91PPV[_a\x08\x16\x82a\x07\x96V[\x90P\x91\x90PV[a\x08&\x81a\x08\x0CV[\x81\x14a\x080W_\x80\xFD[PV[_\x815\x90Pa\x08A\x81a\x08\x1DV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x08[\x81a\x08GV[\x81\x14a\x08eW_\x80\xFD[PV[_\x815\x90Pa\x08v\x81a\x08RV[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x08\x95Wa\x08\x94a\x06jV[[_a\x08\xA2\x88\x82\x89\x01a\x07\xBDV[\x95PP` a\x08\xB3\x88\x82\x89\x01a\x07\xF8V[\x94PP`@a\x08\xC4\x88\x82\x89\x01a\x083V[\x93PP``a\x08\xD5\x88\x82\x89\x01a\x07\xBDV[\x92PP`\x80a\x08\xE6\x88\x82\x89\x01a\x08hV[\x91PP\x92\x95P\x92\x95\x90\x93PV[_\x80`@\x83\x85\x03\x12\x15a\t\tWa\t\x08a\x06jV[[_a\t\x16\x85\x82\x86\x01a\x07\xF8V[\x92PP` a\t'\x85\x82\x86\x01a\x08hV[\x91PP\x92P\x92\x90PV[a\t:\x81a\x07\x96V[\x82RPPV[_\x81\x90P\x91\x90PV[a\tR\x81a\t@V[\x82RPPV[_`@\x82\x01\x90Pa\tk_\x83\x01\x85a\t1V[a\tx` \x83\x01\x84a\tIV[\x93\x92PPPV[_\x81Q\x90Pa\t\x8D\x81a\x08RV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\t\xA8Wa\t\xA7a\x06jV[[_a\t\xB5\x84\x82\x85\x01a\t\x7FV[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[_`\xFF\x82\x16\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[_a\t\xF6a\t\xF1a\t\xEC\x84a\t\xBEV[a\t\xD3V[a\t\xC7V[\x90P\x91\x90PV[a\n\x06\x81a\t\xDCV[\x82RPPV[_`@\x82\x01\x90Pa\n\x1F_\x83\x01\x85a\t\xFDV[a\n,` \x83\x01\x84a\t1V[\x93\x92PPPV[a\n<\x81a\t@V[\x81\x14a\nFW_\x80\xFD[PV[_\x81Q\x90Pa\nW\x81a\n3V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\nrWa\nqa\x06jV[[_a\n\x7F\x84\x82\x85\x01a\nIV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\n\xBF\x82a\x06rV[\x91P\x7F\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x03a\n\xF1Wa\n\xF0a\n\x88V[[\x81_\x03\x90P\x91\x90PV[_a\x0B\x05\x82a\x07wV[\x91Pa\x0B\x10\x83a\x07wV[\x92P\x82\x82\x03\x90Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B<Wa\x0B;a\n\x88V[[\x92\x91PPV[_a\x0B\\a\x0BWa\x0BR\x84a\x07wV[a\t\xD3V[a\x07wV[\x90P\x91\x90PV[_a\x0Bm\x82a\x0BBV[\x90P\x91\x90PV[_a\x0B~\x82a\x0BcV[\x90P\x91\x90PV[a\x0B\x8E\x81a\x0BtV[\x82RPPV[_a\x0B\x9E\x82a\x0BcV[\x90P\x91\x90PV[a\x0B\xAE\x81a\x0B\x94V[\x82RPPV[a\x0B\xBD\x81a\x08GV[\x82RPPV[_`\xA0\x82\x01\x90Pa\x0B\xD6_\x83\x01\x88a\t1V[a\x0B\xE3` \x83\x01\x87a\x0B\x85V[a\x0B\xF0`@\x83\x01\x86a\x0B\xA5V[a\x0B\xFD``\x83\x01\x85a\t1V[a\x0C\n`\x80\x83\x01\x84a\x0B\xB4V[\x96\x95PPPPPPV[a\x0C\x1D\x81a\x06rV[\x82RPPV[a\x0C,\x81a\x07wV[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_[\x83\x81\x10\x15a\x0CiW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x0CNV[_\x84\x84\x01RPPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x0C\x8E\x82a\x0C2V[a\x0C\x98\x81\x85a\x0C<V[\x93Pa\x0C\xA8\x81\x85` \x86\x01a\x0CLV[a\x0C\xB1\x81a\x0CtV[\x84\x01\x91PP\x92\x91PPV[_`\xA0\x82\x01\x90Pa\x0C\xCF_\x83\x01\x88a\t1V[a\x0C\xDC` \x83\x01\x87a\x0B\xB4V[a\x0C\xE9`@\x83\x01\x86a\x0C\x14V[a\x0C\xF6``\x83\x01\x85a\x0C#V[\x81\x81\x03`\x80\x83\x01Ra\r\x08\x81\x84a\x0C\x84V[\x90P\x96\x95PPPPPPV[_\x81Q\x90Pa\r\"\x81a\x06{V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\r>Wa\r=a\x06jV[[_a\rK\x85\x82\x86\x01a\r\x14V[\x92PP` a\r\\\x85\x82\x86\x01a\r\x14V[\x91PP\x92P\x92\x90PV[_a\rp\x82a\x07wV[\x90P\x91\x90PV[a\r\x80\x81a\rfV[\x81\x14a\r\x8AW_\x80\xFD[PV[_\x815\x90Pa\r\x9B\x81a\rwV[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\r\xBAWa\r\xB9a\x06jV[[_a\r\xC7\x88\x82\x89\x01a\r\x8DV[\x95PP` a\r\xD8\x88\x82\x89\x01a\x07\xF8V[\x94PP`@a\r\xE9\x88\x82\x89\x01a\x083V[\x93PP``a\r\xFA\x88\x82\x89\x01a\r\x8DV[\x92PP`\x80a\x0E\x0B\x88\x82\x89\x01a\x08hV[\x91PP\x92\x95P\x92\x95\x90\x93PV[_``\x82\x01\x90Pa\x0E+_\x83\x01\x86a\t\xFDV[a\x0E8` \x83\x01\x85a\t1V[a\x0EE`@\x83\x01\x84a\t1V[\x94\x93PPPPV[_\x80`@\x83\x85\x03\x12\x15a\x0EcWa\x0Eba\x06jV[[_a\x0Ep\x85\x82\x86\x01a\nIV[\x92PP` a\x0E\x81\x85\x82\x86\x01a\nIV[\x91PP\x92P\x92\x90PV[_a\x0E\x95\x82a\t@V[\x91Pa\x0E\xA0\x83a\t@V[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x0E\xB8Wa\x0E\xB7a\n\x88V[[\x92\x91PPV[_a\x0E\xC8\x82a\x07wV[\x91Pa\x0E\xD3\x83a\x07wV[\x92P\x82\x82\x01\x90Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E\xFFWa\x0E\xFEa\n\x88V[[\x92\x91PPV[_`@\x82\x01\x90Pa\x0F\x18_\x83\x01\x85a\x0B\x85V[a\x0F%` \x83\x01\x84a\x0B\xB4V[\x93\x92PPPV\xFE\xA2dipfsX\"\x12 \x1D\x06^\xD0%x\x0B\n4\xAA\x94\xCEJ\xA7\xB7O\x19\x7F\xFF\x93\xA4\x1AY\xDD\x129\xB3\xB0.l\xFD7dsolcC\0\x08\x15\x003";
    /// The bytecode of the contract.
    pub static WEETHUNISWAPLIQUIDATOR_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xFAF\x1E3\x14a\08W\x80c\xFEpz.\x14a\0TW[_\x80\xFD[a\0R`\x04\x806\x03\x81\x01\x90a\0M\x91\x90a\x07\x06V[a\0pV[\0[a\0n`\x04\x806\x03\x81\x01\x90a\0i\x91\x90a\x08|V[a\x017V[\0[`@\x82\x82\x90P\x14a\0\x8CWa\0\x87\x84\x84\x84\x84a\x02\xC2V[a\x011V[_\x80\x83\x83\x81\x01\x90a\0\x9D\x91\x90a\x08\xF3V[\x91P\x91P_\x81a\0\xADW\x86a\0\xAFV[\x85[\x90P\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\0\xEC\x92\x91\x90a\tXV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x01\x08W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01,\x91\x90a\t\x93V[PPPP[PPPPV[_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA0\xD5\xF5\x99_\x88`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01\x93\x92\x91\x90a\n\x0CV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xAEW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xD2\x91\x90a\n]V[\x90Ps\x10\x980\xA1\xAA\xAD`[\xBF\x02\xA9\xDF\xA7\xB0\xB9.\xC2\xFB}\xAAs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x12\x8A\xCB\x080_\x84a\x02\x10\x90a\n\xB5V[`\x01s\xFF\xFD\x89c\xEF\xD1\xFCjPd\x88I]\x95\x1DRc\x98\x8D&a\x021\x91\x90a\n\xFBV[\x8B\x8B\x8B\x8B\x8B`@Q` \x01a\x02J\x95\x94\x93\x92\x91\x90a\x0B\xC3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02y\x95\x94\x93\x92\x91\x90a\x0C\xBCV[`@\x80Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x02\x94W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xB8\x91\x90a\r(V[PPPPPPPPV[_\x80_\x80_\x86\x86\x81\x01\x90a\x02\xD6\x91\x90a\r\xA1V[\x94P\x94P\x94P\x94P\x94P_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c%\x84\x0E\xDA_\x880`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03>\x93\x92\x91\x90a\x0E\x18V[`@\x80Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x03YW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03}\x91\x90a\x0EMV[\x91PP\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xEFi;\xED0\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\xBB\x92\x91\x90a\tXV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\xD2W_\x80\xFD[PZ\xF1\x15\x80\x15a\x03\xE4W=_\x80>=_\xFD[PPPP_\x89\x90P_a\x03\xF9\x85\x88\x84\x87a\x05YV[\x90P_\x82\x82a\x04\x08\x91\x90a\x0E\x8BV[\x90Ps\xC0*\xAA9\xB2#\xFE\x8D\n\x0E\\O'\xEA\xD9\x08<ul\xC2s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x85`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04Y\x92\x91\x90a\tXV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x04uW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x99\x91\x90a\t\x93V[Ps\xC0*\xAA9\xB2#\xFE\x8D\n\x0E\\O'\xEA\xD9\x08<ul\xC2s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05\t\x92\x91\x90a\tXV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05%W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05I\x91\x90a\t\x93V[PPPPPPPPPPPPPPV[_\x80_\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x12\x8A\xCB\x080\x86\x15\x88\x88a\x05\x98W`\x01d\x01\0\x02v\xA3a\x05\x93\x91\x90a\x0E\xBEV[a\x05\xBAV[`\x01s\xFF\xFD\x89c\xEF\xD1\xFCjPd\x88I]\x95\x1DRc\x98\x8D&a\x05\xB9\x91\x90a\n\xFBV[[\x8B\x8A`@Q` \x01a\x05\xCD\x92\x91\x90a\x0F\x05V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05\xFC\x95\x94\x93\x92\x91\x90a\x0C\xBCV[`@\x80Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x06\x17W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06;\x91\x90a\r(V[\x91P\x91P\x83a\x06SW\x80a\x06N\x90a\n\xB5V[a\x06^V[\x81a\x06]\x90a\n\xB5V[[\x92PPP\x94\x93PPPPV[_\x80\xFD[_\x80\xFD[_\x81\x90P\x91\x90PV[a\x06\x84\x81a\x06rV[\x81\x14a\x06\x8EW_\x80\xFD[PV[_\x815\x90Pa\x06\x9F\x81a\x06{V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\x06\xC6Wa\x06\xC5a\x06\xA5V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\xE3Wa\x06\xE2a\x06\xA9V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x06\xFFWa\x06\xFEa\x06\xADV[[\x92P\x92\x90PV[_\x80_\x80``\x85\x87\x03\x12\x15a\x07\x1EWa\x07\x1Da\x06jV[[_a\x07+\x87\x82\x88\x01a\x06\x91V[\x94PP` a\x07<\x87\x82\x88\x01a\x06\x91V[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07]Wa\x07\\a\x06nV[[a\x07i\x87\x82\x88\x01a\x06\xB1V[\x92P\x92PP\x92\x95\x91\x94P\x92PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x07\xA0\x82a\x07wV[\x90P\x91\x90PV[a\x07\xB0\x81a\x07\x96V[\x81\x14a\x07\xBAW_\x80\xFD[PV[_\x815\x90Pa\x07\xCB\x81a\x07\xA7V[\x92\x91PPV[_a\x07\xDB\x82a\x07\x96V[\x90P\x91\x90PV[a\x07\xEB\x81a\x07\xD1V[\x81\x14a\x07\xF5W_\x80\xFD[PV[_\x815\x90Pa\x08\x06\x81a\x07\xE2V[\x92\x91PPV[_a\x08\x16\x82a\x07\x96V[\x90P\x91\x90PV[a\x08&\x81a\x08\x0CV[\x81\x14a\x080W_\x80\xFD[PV[_\x815\x90Pa\x08A\x81a\x08\x1DV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x08[\x81a\x08GV[\x81\x14a\x08eW_\x80\xFD[PV[_\x815\x90Pa\x08v\x81a\x08RV[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x08\x95Wa\x08\x94a\x06jV[[_a\x08\xA2\x88\x82\x89\x01a\x07\xBDV[\x95PP` a\x08\xB3\x88\x82\x89\x01a\x07\xF8V[\x94PP`@a\x08\xC4\x88\x82\x89\x01a\x083V[\x93PP``a\x08\xD5\x88\x82\x89\x01a\x07\xBDV[\x92PP`\x80a\x08\xE6\x88\x82\x89\x01a\x08hV[\x91PP\x92\x95P\x92\x95\x90\x93PV[_\x80`@\x83\x85\x03\x12\x15a\t\tWa\t\x08a\x06jV[[_a\t\x16\x85\x82\x86\x01a\x07\xF8V[\x92PP` a\t'\x85\x82\x86\x01a\x08hV[\x91PP\x92P\x92\x90PV[a\t:\x81a\x07\x96V[\x82RPPV[_\x81\x90P\x91\x90PV[a\tR\x81a\t@V[\x82RPPV[_`@\x82\x01\x90Pa\tk_\x83\x01\x85a\t1V[a\tx` \x83\x01\x84a\tIV[\x93\x92PPPV[_\x81Q\x90Pa\t\x8D\x81a\x08RV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\t\xA8Wa\t\xA7a\x06jV[[_a\t\xB5\x84\x82\x85\x01a\t\x7FV[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[_`\xFF\x82\x16\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[_a\t\xF6a\t\xF1a\t\xEC\x84a\t\xBEV[a\t\xD3V[a\t\xC7V[\x90P\x91\x90PV[a\n\x06\x81a\t\xDCV[\x82RPPV[_`@\x82\x01\x90Pa\n\x1F_\x83\x01\x85a\t\xFDV[a\n,` \x83\x01\x84a\t1V[\x93\x92PPPV[a\n<\x81a\t@V[\x81\x14a\nFW_\x80\xFD[PV[_\x81Q\x90Pa\nW\x81a\n3V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\nrWa\nqa\x06jV[[_a\n\x7F\x84\x82\x85\x01a\nIV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\n\xBF\x82a\x06rV[\x91P\x7F\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x03a\n\xF1Wa\n\xF0a\n\x88V[[\x81_\x03\x90P\x91\x90PV[_a\x0B\x05\x82a\x07wV[\x91Pa\x0B\x10\x83a\x07wV[\x92P\x82\x82\x03\x90Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B<Wa\x0B;a\n\x88V[[\x92\x91PPV[_a\x0B\\a\x0BWa\x0BR\x84a\x07wV[a\t\xD3V[a\x07wV[\x90P\x91\x90PV[_a\x0Bm\x82a\x0BBV[\x90P\x91\x90PV[_a\x0B~\x82a\x0BcV[\x90P\x91\x90PV[a\x0B\x8E\x81a\x0BtV[\x82RPPV[_a\x0B\x9E\x82a\x0BcV[\x90P\x91\x90PV[a\x0B\xAE\x81a\x0B\x94V[\x82RPPV[a\x0B\xBD\x81a\x08GV[\x82RPPV[_`\xA0\x82\x01\x90Pa\x0B\xD6_\x83\x01\x88a\t1V[a\x0B\xE3` \x83\x01\x87a\x0B\x85V[a\x0B\xF0`@\x83\x01\x86a\x0B\xA5V[a\x0B\xFD``\x83\x01\x85a\t1V[a\x0C\n`\x80\x83\x01\x84a\x0B\xB4V[\x96\x95PPPPPPV[a\x0C\x1D\x81a\x06rV[\x82RPPV[a\x0C,\x81a\x07wV[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_[\x83\x81\x10\x15a\x0CiW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x0CNV[_\x84\x84\x01RPPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x0C\x8E\x82a\x0C2V[a\x0C\x98\x81\x85a\x0C<V[\x93Pa\x0C\xA8\x81\x85` \x86\x01a\x0CLV[a\x0C\xB1\x81a\x0CtV[\x84\x01\x91PP\x92\x91PPV[_`\xA0\x82\x01\x90Pa\x0C\xCF_\x83\x01\x88a\t1V[a\x0C\xDC` \x83\x01\x87a\x0B\xB4V[a\x0C\xE9`@\x83\x01\x86a\x0C\x14V[a\x0C\xF6``\x83\x01\x85a\x0C#V[\x81\x81\x03`\x80\x83\x01Ra\r\x08\x81\x84a\x0C\x84V[\x90P\x96\x95PPPPPPV[_\x81Q\x90Pa\r\"\x81a\x06{V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\r>Wa\r=a\x06jV[[_a\rK\x85\x82\x86\x01a\r\x14V[\x92PP` a\r\\\x85\x82\x86\x01a\r\x14V[\x91PP\x92P\x92\x90PV[_a\rp\x82a\x07wV[\x90P\x91\x90PV[a\r\x80\x81a\rfV[\x81\x14a\r\x8AW_\x80\xFD[PV[_\x815\x90Pa\r\x9B\x81a\rwV[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\r\xBAWa\r\xB9a\x06jV[[_a\r\xC7\x88\x82\x89\x01a\r\x8DV[\x95PP` a\r\xD8\x88\x82\x89\x01a\x07\xF8V[\x94PP`@a\r\xE9\x88\x82\x89\x01a\x083V[\x93PP``a\r\xFA\x88\x82\x89\x01a\r\x8DV[\x92PP`\x80a\x0E\x0B\x88\x82\x89\x01a\x08hV[\x91PP\x92\x95P\x92\x95\x90\x93PV[_``\x82\x01\x90Pa\x0E+_\x83\x01\x86a\t\xFDV[a\x0E8` \x83\x01\x85a\t1V[a\x0EE`@\x83\x01\x84a\t1V[\x94\x93PPPPV[_\x80`@\x83\x85\x03\x12\x15a\x0EcWa\x0Eba\x06jV[[_a\x0Ep\x85\x82\x86\x01a\nIV[\x92PP` a\x0E\x81\x85\x82\x86\x01a\nIV[\x91PP\x92P\x92\x90PV[_a\x0E\x95\x82a\t@V[\x91Pa\x0E\xA0\x83a\t@V[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x0E\xB8Wa\x0E\xB7a\n\x88V[[\x92\x91PPV[_a\x0E\xC8\x82a\x07wV[\x91Pa\x0E\xD3\x83a\x07wV[\x92P\x82\x82\x01\x90Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E\xFFWa\x0E\xFEa\n\x88V[[\x92\x91PPV[_`@\x82\x01\x90Pa\x0F\x18_\x83\x01\x85a\x0B\x85V[a\x0F%` \x83\x01\x84a\x0B\xB4V[\x93\x92PPPV\xFE\xA2dipfsX\"\x12 \x1D\x06^\xD0%x\x0B\n4\xAA\x94\xCEJ\xA7\xB7O\x19\x7F\xFF\x93\xA4\x1AY\xDD\x129\xB3\xB0.l\xFD7dsolcC\0\x08\x15\x003";
    /// The deployed bytecode of the contract.
    pub static WEETHUNISWAPLIQUIDATOR_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct WeEthUniswapLiquidator<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for WeEthUniswapLiquidator<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for WeEthUniswapLiquidator<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for WeEthUniswapLiquidator<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for WeEthUniswapLiquidator<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(WeEthUniswapLiquidator))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> WeEthUniswapLiquidator<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    WEETHUNISWAPLIQUIDATOR_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                WEETHUNISWAPLIQUIDATOR_ABI.clone(),
                WEETHUNISWAPLIQUIDATOR_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `liquidate` (0xfe707a2e) function
        pub fn liquidate(
            &self,
            user: ::ethers::core::types::Address,
            collateral_token: ::ethers::core::types::Address,
            gem_join: ::ethers::core::types::Address,
            pool: ::ethers::core::types::Address,
            weth_is_token_0: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [254, 112, 122, 46],
                    (user, collateral_token, gem_join, pool, weth_is_token_0),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `uniswapV3SwapCallback` (0xfa461e33) function
        pub fn uniswap_v3_swap_callback(
            &self,
            amount_0_delta: ::ethers::core::types::I256,
            amount_1_delta: ::ethers::core::types::I256,
            data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([250, 70, 30, 51], (amount_0_delta, amount_1_delta, data))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for WeEthUniswapLiquidator<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `liquidate` function with signature `liquidate(address,address,address,address,bool)` and selector `0xfe707a2e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "liquidate",
        abi = "liquidate(address,address,address,address,bool)"
    )]
    pub struct LiquidateCall {
        pub user: ::ethers::core::types::Address,
        pub collateral_token: ::ethers::core::types::Address,
        pub gem_join: ::ethers::core::types::Address,
        pub pool: ::ethers::core::types::Address,
        pub weth_is_token_0: bool,
    }
    ///Container type for all input parameters for the `uniswapV3SwapCallback` function with signature `uniswapV3SwapCallback(int256,int256,bytes)` and selector `0xfa461e33`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "uniswapV3SwapCallback",
        abi = "uniswapV3SwapCallback(int256,int256,bytes)"
    )]
    pub struct UniswapV3SwapCallbackCall {
        pub amount_0_delta: ::ethers::core::types::I256,
        pub amount_1_delta: ::ethers::core::types::I256,
        pub data: ::ethers::core::types::Bytes,
    }
    ///Container type for all of the contract's call
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        serde::Serialize,
        serde::Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub enum WeEthUniswapLiquidatorCalls {
        Liquidate(LiquidateCall),
        UniswapV3SwapCallback(UniswapV3SwapCallbackCall),
    }
    impl ::ethers::core::abi::AbiDecode for WeEthUniswapLiquidatorCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <LiquidateCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Liquidate(decoded));
            }
            if let Ok(decoded) = <UniswapV3SwapCallbackCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::UniswapV3SwapCallback(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for WeEthUniswapLiquidatorCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Liquidate(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::UniswapV3SwapCallback(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for WeEthUniswapLiquidatorCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Liquidate(element) => ::core::fmt::Display::fmt(element, f),
                Self::UniswapV3SwapCallback(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<LiquidateCall> for WeEthUniswapLiquidatorCalls {
        fn from(value: LiquidateCall) -> Self {
            Self::Liquidate(value)
        }
    }
    impl ::core::convert::From<UniswapV3SwapCallbackCall>
    for WeEthUniswapLiquidatorCalls {
        fn from(value: UniswapV3SwapCallbackCall) -> Self {
            Self::UniswapV3SwapCallback(value)
        }
    }
}
